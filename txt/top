SCREEN(1)                   General Commands Manual                  SCREEN(1)

NNAAMMEE
       screen - screen manager with VT100/ANSI terminal emulation

SSYYNNOOPPSSIISS
       ssccrreeeenn [ --_o_p_t_i_o_n_s ] [ _c_m_d [ _a_r_g_s ] ]
       ssccrreeeenn --rr [[_p_i_d..]_t_t_y[.._h_o_s_t]]
       ssccrreeeenn --rr _s_e_s_s_i_o_n_o_w_n_e_r//[[_p_i_d..]_t_t_y[.._h_o_s_t]]

DDEESSCCRRIIPPTTIIOONN
       _S_c_r_e_e_n is a full-screen window manager that multiplexes a physical ter‐
       minal between several processes (typically interactive  shells).   Each
       virtual terminal provides the functions of a DEC VT100 terminal and, in
       addition, several control functions from the ISO 6429  (ECMA  48,  ANSI
       X3.64)  and ISO 2022 standards (e.g. insert/delete line and support for
       multiple character sets).  There is a  scrollback  history  buffer  for
       each virtual terminal and a copy-and-paste mechanism that allows moving
       text regions between windows.

       When _s_c_r_e_e_n is called, it creates a single window with a  shell  in  it
       (or  the  specified  command) and then gets out of your way so that you
       can use the program as you normally would.  Then, at any time, you  can
       create new (full-screen) windows with other programs in them (including
       more shells), kill existing windows, view a list of windows, turn  out‐
       put  logging  on and off, copy-and-paste text between windows, view the
       scrollback history, switch between windows in whatever manner you wish,
       etc.  All  windows  run  their  programs completely independent of each
       other. Programs continue to run when their window is currently not vis‐
       ible and even when the whole _s_c_r_e_e_n session is detached from the user's
       terminal.  When a program terminates, _s_c_r_e_e_n (per  default)  kills  the
       window  that  contained  it.  If this window was in the foreground, the
       display switches to the previous  window;  if  none  are  left,  _s_c_r_e_e_n
       exits.  Shells  usually  distinguish  between running as login-shell or
       sub-shell.  Screen runs them as sub-shells, unless told otherwise  (See
       "shell" .screenrc command).

       Everything  you type is sent to the program running in the current win‐
       dow.  The only exception to this is the one keystroke that is  used  to
       initiate  a  command  to  the window manager.  By default, each command
       begins with a control-a (abbreviated C-a from now on), and is  followed
       by one other keystroke.  The command character and all the key bindings
       can be fully customized to be anything you like, though they are always
       two characters in length.

       _S_c_r_e_e_n  does  not  understand the prefix "C-" to mean control, although
       this notation is used in this manual for readability.  Please  use  the
       caret  notation ("^A" instead of "C-a") as arguments to e.g. the _e_s_c_a_p_e
       command or the _-_e option.  _S_c_r_e_e_n will also print out  control  charac‐
       ters in caret notation.

       The  standard way to create a new window is to type "C-a c".  This cre‐
       ates a new window running a shell and switches to that  window  immedi‐
       ately,  regardless  of  the state of the process running in the current
       window.  Similarly, you can create a new window with a  custom  command
       in  it  by  first binding the command to a keystroke (in your .screenrc
       file or at the "C-a :" command line) and then using it  just  like  the
       "C-a  c" command.  In addition, new windows can be created by running a
       command like:

              screen emacs prog.c

       from a shell prompt within a previously created window.  This will  not
       run  another  copy  of _s_c_r_e_e_n, but will instead supply the command name
       and its arguments to the window manager (specified in the $STY environ‐
       ment  variable)  who  will  use it to create the new window.  The above
       example would start the emacs editor (editing prog.c) and switch to its
       window. - Note that you cannot transport environment variables from the
       invoking shell to the application (emacs in this case), because  it  is
       forked from the parent screen process, not from the invoking shell.

       If "/var/run/utmp" is writable by _s_c_r_e_e_n, an appropriate record will be
       written to this file for each window, and removed when  the  window  is
       terminated.   This  is useful for working with "talk", "script", "shut‐
       down", "rsend", "sccs" and other similar programs  that  use  the  utmp
       file to determine who you are. As long as _s_c_r_e_e_n is active on your ter‐
       minal, the terminal's own record is removed from  the  utmp  file.  See
       also "C-a L".

GGEETTTTIINNGG SSTTAARRTTEEDD
       Before  you  begin to use _s_c_r_e_e_n you'll need to make sure you have cor‐
       rectly selected your terminal type, just as you  would  for  any  other
       termcap/terminfo program.  (You can do this by using _t_s_e_t for example.)

       If  you're  impatient  and want to get started without doing a lot more
       reading, you should remember this one command:  "C-a ?".  Typing  these
       two characters will display a list of the available _s_c_r_e_e_n commands and
       their bindings. Each keystroke is discussed in the section "DEFAULT KEY
       BINDINGS".  The  manual section "CUSTOMIZATION" deals with the contents
       of your .screenrc.

       If your terminal is a "true" auto-margin terminal (it doesn't allow the
       last position on the screen to be updated without scrolling the screen)
       consider using a version of your terminal's termcap that has  automatic
       margins  turned _o_f_f. This will ensure an accurate and optimal update of
       the screen in all circumstances. Most terminals nowadays  have  "magic"
       margins  (automatic margins plus usable last column). This is the VT100
       style type and perfectly suited for _s_c_r_e_e_n.  If all  you've  got  is  a
       "true"  auto-margin  terminal  _s_c_r_e_e_n  will  be  content to use it, but
       updating a character put into the last position on the screen  may  not
       be  possible  until the screen scrolls or the character is moved into a
       safe position in some other way. This delay can be shortened by using a
       terminal with insert-character capability.

CCOOMMMMAANNDD--LLIINNEE OOPPTTIIOONNSS
       Screen has the following command-line options:

       --aa   include _a_l_l capabilities (with some minor exceptions) in each win‐
            dow's termcap, even if _s_c_r_e_e_n must redraw parts of the display  in
            order to implement a function.

       --AA   Adapt  the  sizes of all windows to the size of the current termi‐
            nal.  By default, _s_c_r_e_e_n tries to restore  its  old  window  sizes
            when  attaching  to  resizable  terminals  (those with "WS" in its
            description, e.g. suncmd or some xterm).

       --cc _f_i_l_e
            override the default configuration file from "$HOME/.screenrc"  to
            _f_i_l_e.

       --dd|--DD [_p_i_d_._t_t_y_._h_o_s_t]
            does  not  start _s_c_r_e_e_n, but detaches the elsewhere running _s_c_r_e_e_n
            session. It has the same effect as typing "C-a  d"  from  _s_c_r_e_e_n's
            controlling  terminal.  --DD  is  the equivalent to the power detach
            key.  If no session can be detached, this option  is  ignored.  In
            combination  with  the  --rr/--RR  option more powerful effects can be
            achieved:

       --dd --rr   Reattach a session and if necessary detach it first.

       --dd --RR   Reattach a session and if necessary detach or  even  create  it
               first.

       --dd --RRRR  Reattach  a  session  and if necessary detach or create it. Use
               the first session if more than one session is available.

       --DD --rr   Reattach a session. If necessary  detach  and  logout  remotely
               first.

       --DD --RR   Attach here and now. In detail this means: If a session is run‐
               ning, then reattach. If necessary detach  and  logout  remotely
               first.   If  it  was not running create it and notify the user.
               This is the author's favorite.

       --DD --RRRR  Attach here and now. Whatever that means, just do it.

            Note: It is always a good idea to check the status  of  your  ses‐
            sions by means of "screen -list".

       --ee _x_y
            specifies the command character to be _x and the character generat‐
            ing a literal command character to _y (when typed after the command
            character).   The default is "C-a" and `a', which can be specified
            as "-e^Aa".  When creating a _s_c_r_e_e_n session, this option sets  the
            default  command character. In a multiuser session all users added
            will start off with this command character. But when attaching  to
            an  already  running session, this option changes only the command
            character of the attaching user.  This  option  is  equivalent  to
            either the commands "defescape" or "escape" respectively.

       --ff, --ffnn, and --ffaa
            turns  flow-control  on, off, or "automatic switching mode".  This
            can also be defined through the "defflow" .screenrc command.

       --hh _n_u_m
            Specifies the history scrollback buffer to be _n_u_m lines high.

       --ii   will cause the interrupt key (usually C-c) to interrupt  the  dis‐
            play  immediately  when  flow-control  is  on.   See the "defflow"
            .screenrc command for details.  The use of this option is discour‐
            aged.

       --ll and --llnn
            turns login mode on or off (for /var/run/utmp updating).  This can
            also be defined through the "deflogin" .screenrc command.

       --llss [_m_a_t_c_h]
       --lliisstt [_m_a_t_c_h]
            does not start _s_c_r_e_e_n, but prints a list of  _p_i_d_._t_t_y_._h_o_s_t  strings
            and  creation  timestamps  identifying your _s_c_r_e_e_n sessions.  Ses‐
            sions marked `detached' can be resumed  with  "screen  -r".  Those
            marked  `attached' are running and have a controlling terminal. If
            the session runs in multiuser mode, it is marked `multi'. Sessions
            marked  as  `unreachable'  either  live on a different host or are
            `dead'.  An unreachable session is considered dead, when its  name
            matches either the name of the local host, or the specified param‐
            eter, if any.  See the --rr flag for a description how to  construct
            matches.   Sessions  marked as `dead' should be thoroughly checked
            and removed.  Ask your system administrator if you are  not  sure.
            Remove sessions with the --wwiippee option.

       --LL   tells _s_c_r_e_e_n to turn on automatic output logging for the windows.

       --mm   causes  _s_c_r_e_e_n  to  ignore  the  $STY  environment  variable. With
            "screen -m" creation of a  new  session  is  enforced,  regardless
            whether  _s_c_r_e_e_n  is  called  from within another _s_c_r_e_e_n session or
            not. This flag has a special meaning in connection with  the  `-d'
            option:

       --dd --mm   Start _s_c_r_e_e_n in "detached" mode. This creates a new session but
               doesn't attach  to  it.  This  is  useful  for  system  startup
               scripts.

       --DD --mm   This  also starts screen in "detached" mode, but doesn't fork a
               new process. The command exits if the session terminates.

       --OO   selects a more optimal output mode for your terminal  rather  than
            true  VT100  emulation (only affects auto-margin terminals without
            `LP').  This can also be set in your .screenrc by specifying  `OP'
            in a "termcap" command.

       --pp _n_u_m_b_e_r___o_r___n_a_m_e_|_-_|_=_|_+
            Preselect  a window. This is useful when you want to reattach to a
            specific window or you want to send a command via the "-X"  option
            to a specific window. As with screen's select command, "-" selects
            the blank window. As a special case for reattach,  "="  brings  up
            the  windowlist on the blank window, while a "+" will create a new
            window. The command will not be executed if the  specified  window
            could not be found.

       --qq   Suppress printing of error messages. In combination with "-ls" the
            exit value is as follows: 9 indicates  a  directory  without  ses‐
            sions.  10  indicates  a directory with running but not attachable
            sessions. 11 (or more) indicates 1 (or more) usable sessions.   In
            combination  with  "-r" the exit value is as follows: 10 indicates
            that there is no session to resume. 12 (or  more)  indicates  that
            there  are  2  (or more) sessions to resume and you should specify
            which one to choose.  In all other cases "-q" has no effect.

       --QQ   Some commands now can be queried from a remote session using  this
            flag,  e.g.  "screen  -Q  windows".  The  commands  will  send the
            response to the stdout of the querying process. If  there  was  an
            error  in  the command, then the querying process will exit with a
            non-zero status.

            The commands that can be queried now are:
             eecchhoo
             iinnffoo
             llaassttmmssgg
             nnuummbbeerr
             sseelleecctt
             ttiimmee
             ttiittllee
             wwiinnddoowwss

       --rr [_p_i_d_._t_t_y_._h_o_s_t]
       --rr _s_e_s_s_i_o_n_o_w_n_e_r_/_[_p_i_d_._t_t_y_._h_o_s_t]
            resumes a detached _s_c_r_e_e_n session.  No other options (except  com‐
            binations  with --dd/--DD) may be specified, though an optional prefix
            of [_p_i_d_.]_t_t_y_._h_o_s_t may be needed to  distinguish  between  multiple
            detached  _s_c_r_e_e_n  sessions.  The second form is used to connect to
            another user's screen session which runs in multiuser  mode.  This
            indicates  that  screen should look for sessions in another user's
            directory. This requires setuid-root.

       --RR   resumes screen only when it's unambiguous  which  one  to  attach,
            usually  when  only one _s_c_r_e_e_n is detached. Otherwise lists avail‐
            able sessions.  --RRRR attempts to resume the youngest (in  terms  of
            creation  time)  detached _s_c_r_e_e_n session it finds.  If successful,
            all other command-line options are ignored.  If no  detached  ses‐
            sion  exists,  starts  a  new session using the specified options,
            just as if --RR had not been specified. The option is set by default
            if  _s_c_r_e_e_n is run as a login-shell (actually screen uses "-xRR" in
            that case).  For combinations with the  --dd/--DD  option  see  there.
            NNoottee:: Time-based session selection is a Debian addition.

       --ss _p_r_o_g_r_a_m
            sets  the  default  shell to the program specified, instead of the
            value in the environment variable  $SHELL  (or  "/bin/sh"  if  not
            defined).   This can also be defined through the "shell" .screenrc
            command.  See also there.

       --SS _s_e_s_s_i_o_n_n_a_m_e
            When creating a new session, this option can be used to specify  a
            meaningful  name for the session. This name identifies the session
            for "screen -list" and "screen -r"  actions.  It  substitutes  the
            default [_t_t_y_._h_o_s_t] suffix.

       --tt _n_a_m_e
            sets  the  title  (a.k.a.) for the default shell or specified pro‐
            gram.  See also the "shelltitle" .screenrc command.

       --TT _t_e_r_m
            Set the $TERM environment  varible  using  the  spcified  term  as
            opposed to the defualt setting of ssccrreeeenn.

       --UU   Run  screen in UTF-8 mode. This option tells screen that your ter‐
            minal sends and understands UTF-8 encoded characters. It also sets
            the default encoding for new windows to `utf8'.

       --vv   Print version number.

       --wwiippee [_m_a_t_c_h]
            does  the  same  as  "screen  -ls", but removes destroyed sessions
            instead of marking them as `dead'.  An unreachable session is con‐
            sidered  dead,  when its name matches either the name of the local
            host, or the explicitly given parameter, if any.  See the --rr  flag
            for a description how to construct matches.

       --xx   Attach  to  a  not  detached _s_c_r_e_e_n session. (Multi display mode).
            _S_c_r_e_e_n refuses to attach from within itself.  But  when  cascading
            multiple screens, loops are not detected; take care.

       --XX   Send  the  specified  command to a running screen session. You may
            use the --SS option to specify the screen session if you  have  sev‐
            eral  screen  sessions running. You can use the --dd or --rr option to
            tell screen to look only for attached or detached screen sessions.
            Note  that  this  command  doesn't work if the session is password
            protected.

       --44   Resolve hostnames only to IPv4 addresses.

       --66   Resolve hostnames only to IPv6 addresses.

DDEEFFAAUULLTT KKEEYY BBIINNDDIINNGGSS
       As mentioned, each _s_c_r_e_e_n command consists of a "C-a" followed  by  one
       other  character.  For your convenience, all commands that are bound to
       lower-case letters are also bound to their control  character  counter‐
       parts (with the exception of "C-a a"; see below), thus, "C-a c" as well
       as "C-a C-c" can be used to create a window.  See  section  "CUSTOMIZA‐
       TION" for a description of the command.

       The following table shows the default key bindings:

       CC--aa ''       (select)      Prompt  for a window name or number to switch
                                 to.

       CC--aa ""       (windowlist -b)
                                 Present a list of all windows for selection.

       CC--aa 00       (select 0)
        ……             …
       CC--aa 99       (select 9)
       CC--aa --       (select -)    Switch to window number 0  -  9,  or  to  the
                                 blank window.

       CC--aa ttaabb     (focus)       Switch  the  input  focus to the next region.
                                 See also _s_p_l_i_t_, _r_e_m_o_v_e_, _o_n_l_y.

       CC--aa CC--aa     (other)       Toggle to the  window  displayed  previously.
                                 Note  that  this binding defaults to the com‐
                                 mand character typed twice,  unless  overrid‐
                                 den.   For  instance,  if  you use the option
                                 "--ee]]xx", this command becomes "]]".

       CC--aa aa       (meta)        Send the command character (C-a)  to  window.
                                 See _e_s_c_a_p_e command.

       CC--aa AA       (title)       Allow  the  user to enter a name for the cur‐
                                 rent window.

       CC--aa bb
       CC--aa CC--bb     (break)       Send a break to window.

       CC--aa BB       (pow_break)   Reopen the terminal line and send a break.

       CC--aa cc
       CC--aa CC--cc     (screen)      Create a new window with a shell  and  switch
                                 to that window.

       CC--aa CC       (clear)       Clear the screen.

       CC--aa dd
       CC--aa CC--dd     (detach)      Detach _s_c_r_e_e_n from this terminal.

       CC--aa DD DD     (pow_detach)  Detach and logout.

       CC--aa ff
       CC--aa CC--ff     (flow)        Toggle flow _o_n, _o_f_f or _a_u_t_o.

       CC--aa FF       (fit)         Resize the window to the current region size.

       CC--aa CC--gg     (vbell)       Toggles _s_c_r_e_e_n_'_s visual bell mode.

       CC--aa hh       (hardcopy)    Write a hardcopy of the current window to the
                                 file "hardcopy._n".

       CC--aa HH       (log)         Begins/ends logging of the current window  to
                                 the file "screenlog._n".

       CC--aa ii
       CC--aa CC--ii     (info)        Show info about this window.

       CC--aa kk
       CC--aa CC--kk     (kill)        Destroy current window.

       CC--aa ll
       CC--aa CC--ll     (redisplay)   Fully refresh current window.

       CC--aa LL       (login)       Toggle  this  windows  login  slot. Available
                                 only if _s_c_r_e_e_n is configured  to  update  the
                                 utmp database.

       CC--aa mm
       CC--aa CC--mm     (lastmsg)     Repeat the last message displayed in the mes‐
                                 sage line.

       CC--aa MM       (monitor)     Toggles monitoring of the current window.

       CC--aa ssppaaccee
       CC--aa nn
       CC--aa CC--nn     (next)        Switch to the next window.

       CC--aa NN       (number)      Show the number (and title)  of  the  current
                                 window.

       CC--aa bbaacckkssppaaccee
       CC--aa CC--hh
       CC--aa pp
       CC--aa CC--pp     (prev)        Switch to the previous window (opposite of CC--
                                 aa nn).

       CC--aa qq
       CC--aa CC--qq     (xon)         Send a control-q to the current window.

       CC--aa QQ       (only)        Delete all regions but the current one.   See
                                 also _s_p_l_i_t_, _r_e_m_o_v_e_, _f_o_c_u_s.

       CC--aa rr
       CC--aa CC--rr     (wrap)        Toggle the current window's line-wrap setting
                                 (turn the current window's automatic  margins
                                 on and off).

       CC--aa ss
       CC--aa CC--ss     (xoff)        Send a control-s to the current window.

       CC--aa SS       (split)       Split  the  current  region horizontally into
                                 two new ones.  See also _o_n_l_y_, _r_e_m_o_v_e_, _f_o_c_u_s.

       CC--aa tt
       CC--aa CC--tt     (time)        Show system information.

       CC--aa vv       (version)     Display the version and compilation date.

       CC--aa CC--vv     (digraph)     Enter digraph.

       CC--aa ww
       CC--aa CC--ww     (windows)     Show a list of window.

       CC--aa WW       (width)       Toggle 80/132 columns.

       CC--aa xx
       CC--aa CC--xx     (lockscreen)  Lock this terminal.

       CC--aa XX       (remove)      Kill the current  region.   See  also  _s_p_l_i_t_,
                                 _o_n_l_y_, _f_o_c_u_s.

       CC--aa zz
       CC--aa CC--zz     (suspend)     Suspend  _s_c_r_e_e_n.   Your  system  must support
                                 BSD-style job-control.

       CC--aa ZZ       (reset)       Reset the virtual terminal to its  "power-on"
                                 values.

       CC--aa ..       (dumptermcap) Write out a ".termcap" file.

       CC--aa ??       (help)        Show key bindings.

       CC--aa \\       (quit)        Kill all windows and terminate _s_c_r_e_e_n.

       CC--aa ::       (colon)       Enter command line mode.

       CC--aa [[
       CC--aa CC--[[
       CC--aa eesscc     (copy)        Enter copy/scrollback mode.

       CC--aa CC--]]
       CC--aa ]]       (paste .)     Write the contents of the paste buffer to the
                                 stdin queue of the current window.

       CC--aa {{
       CC--aa }}       (history)     Copy and paste a previous (command) line.

       CC--aa >>       (writebuf)    Write paste buffer to a file.

       CC--aa <<       (readbuf)     Reads the screen-exchange file into the paste
                                 buffer.

       CC--aa ==       (removebuf)   Removes the file used by CC--aa << and CC--aa >>.

       CC--aa ,,       (license)     Shows  where _s_c_r_e_e_n comes from, where it went
                                 to and why you can use it.

       CC--aa __       (silence)     Start/stop monitoring the current window  for
                                 inactivity.

       CC--aa ||       (split -v)    Split  the current region vertically into two
                                 new ones.

       CC--aa **       (displays)    Show a listing of all currently attached dis‐
                                 plays.

CCUUSSTTOOMMIIZZAATTIIOONN
       The  "socket  directory"  defaults either to $HOME/.screen or simply to
       /tmp/screens or preferably to /var/run/screen chosen  at  compile-time.
       If  _s_c_r_e_e_n is installed setuid-root, then the administrator should com‐
       pile _s_c_r_e_e_n with an adequate (not NFS  mounted)  socket  directory.  If
       _s_c_r_e_e_n  is  not  running setuid-root, the user can specify any mode 700
       directory in the environment variable $SCREENDIR.

       When _s_c_r_e_e_n is invoked, it executes initialization  commands  from  the
       files  "/etc/screenrc"  and  ".screenrc"  in the user's home directory.
       These are the "programmer's defaults" that can  be  overridden  in  the
       following  ways:  for  the global screenrc file _s_c_r_e_e_n searches for the
       environment variable $SYSSCREENRC (this override feature  may  be  dis‐
       abled  at compile-time). The user specific screenrc file is searched in
       $SCREENRC, then $HOME/.screenrc.  The  command  line  option  --cc  takes
       precedence over the above user screenrc files.

       Commands  in  these  files  are  used to set options, bind functions to
       keys, and to automatically establish one or more windows at the  begin‐
       ning  of  your  _s_c_r_e_e_n session.  Commands are listed one per line, with
       empty lines being ignored.  A command's arguments are separated by tabs
       or  spaces,  and  may  be surrounded by single or double quotes.  A `#'
       turns the rest of the line into a comment, except in quotes.   Unintel‐
       ligible  lines are warned about and ignored.  Commands may contain ref‐
       erences to environment variables. The syntax is the shell-like "$VAR  "
       or "${VAR}". Note that this causes incompatibility with previous _s_c_r_e_e_n
       versions, as now the '$'-character has to be protected with '\'  if  no
       variable  substitution shall be performed. A string in single-quotes is
       also protected from variable substitution.

       Two configuration files are shipped as examples with your  screen  dis‐
       tribution:  "etc/screenrc" and "etc/etcscreenrc". They contain a number
       of useful examples for various commands.

       Customization can also be done 'on-line'. To  enter  the  command  mode
       type  `C-a  :'.  Note  that commands starting with "def" change default
       values, while others change current settings.

       The following commands are available:

       aaccllaadddd _u_s_e_r_n_a_m_e_s [_c_r_y_p_t_e_d_-_p_w]
       aaddddaaccll _u_s_e_r_n_a_m_e_s

       Enable users to fully access this screen session. _U_s_e_r_n_a_m_e_s can be  one
       user or a comma separated list of users. This command enables to attach
       to the _s_c_r_e_e_n session and performs the equivalent of `aclchg  _u_s_e_r_n_a_m_e_s
       +rwx  "#?"'.   executed.  To add a user with restricted access, use the
       `aclchg' command below.  If an optional second parameter  is  supplied,
       it  should  be  a crypted password for the named user(s). `Addacl' is a
       synonym to `acladd'.  Multi user mode only.

       aaccllcchhgg _u_s_e_r_n_a_m_e_s _p_e_r_m_b_i_t_s _l_i_s_t
       cchhaaccll _u_s_e_r_n_a_m_e_s _p_e_r_m_b_i_t_s _l_i_s_t

       Change permissions for a comma separated list of users. Permission bits
       are  represented  as `r', `w' and `x'. Prefixing `+' grants the permis‐
       sion, `-' removes it. The third parameter is a comma separated list  of
       commands and/or windows (specified either by number or title). The spe‐
       cial list `#' refers to all windows, `?' to all commands. if  _u_s_e_r_n_a_m_e_s
       consists  of a single `*', all known users are affected.  A command can
       be executed when the user has the `x' bit for it.  The  user  can  type
       input to a window when he has its `w' bit set and no other user obtains
       a writelock for this window.  Other bits  are  currently  ignored.   To
       withdraw  the writelock from another user in window 2: `aclchg _u_s_e_r_n_a_m_e
       -w+w 2'.  To allow read-only access to the session: `aclchg _u_s_e_r_n_a_m_e -w
       "#"'.  As soon as a user's name is known to _s_c_r_e_e_n he can attach to the
       session and (per default) has full permissions for all command and win‐
       dows. Execution permission for the acl commands, `at' and others should
       also be removed or the user may be able  to  regain  write  permission.
       Rights  of  the special username nnoobbooddyy cannot be changed (see the "su"
       command).  `Chacl' is a synonym to `aclchg'.  Multi user mode only.

       aaccllddeell _u_s_e_r_n_a_m_e

       Remove a user from _s_c_r_e_e_n's access control list. If currently attached,
       all the user's displays are detached from the session. He cannot attach
       again.  Multi user mode only.

       aaccllggrrpp _u_s_e_r_n_a_m_e [_g_r_o_u_p_n_a_m_e]

       Creates groups of users that share common access rights.  The  name  of
       the group is the username of the group leader. Each member of the group
       inherits the permissions that are granted to  the  group  leader.  That
       means,  if  a user fails an access check, another check is made for the
       group leader.  A user is removed from  all  groups  the  special  value
       "none"  is  used for _g_r_o_u_p_n_a_m_e.  If the second parameter is omitted all
       groups the user is in are listed.

       aacclluummaasskk [[_u_s_e_r_s]_+_b_i_t_s |[_u_s_e_r_s]_-_b_i_t_s …. ]
       uummaasskk [[_u_s_e_r_s]_+_b_i_t_s |[_u_s_e_r_s]_-_b_i_t_s …. ]

       This specifies the access other users have to windows that will be cre‐
       ated  by  the  caller  of the command.  _U_s_e_r_s may be no, one or a comma
       separated list of known usernames. If no users are specified, a list of
       all  currently  known  users  is  assumed.   _B_i_t_s is any combination of
       access control bits allowed defined with the "aclchg" command. The spe‐
       cial  username  "?" predefines the access that not yet known users will
       be granted to any window initially.  The special username  "??"  prede‐
       fines  the  access that not yet known users are granted to any command.
       Rights of the special username nnoobbooddyy cannot be changed (see  the  "su"
       command).  `Umask' is a synonym to `aclumask'.

       aaccttiivviittyy _m_e_s_s_a_g_e

       When  any  activity  occurs  in a background window that is being moni‐
       tored, _s_c_r_e_e_n displays a notification in the message line.  The notifi‐
       cation  message  can  be re-defined by means of the "activity" command.
       Each occurrence of `%' in _m_e_s_s_a_g_e is replaced by the number of the win‐
       dow  in  which  activity  has  occurred, and each occurrence of `^G' is
       replaced by the definition for bell in your termcap (usually an audible
       bell).  The default message is

                   'Activity in window %n'

       Note  that  monitoring  is  off  for all windows by default, but can be
       altered by use of the "monitor" command (C-a M).

       aallllppaarrttiiaall oonn|ooffff

       If set to on, only the current  cursor  line  is  refreshed  on  window
       change.   This  affects  all  windows  and  is useful for slow terminal
       lines. The previous setting of full/partial refresh for each window  is
       restored with "allpartial off".  This is a global flag that immediately
       takes effect on all windows overriding the "partial" settings. It  does
       not change the default redraw behavior of newly created windows.

       aallttssccrreeeenn oonn|ooffff

       If  set  to on, "alternate screen" support is enabled in virtual termi‐
       nals, just like in xterm.  Initial setting is `off'.

       aatt [_i_d_e_n_t_i_f_i_e_r][##|**|%%] _c_o_m_m_a_n_d [_a_r_g_s … ]

       Execute a command at other displays  or  windows  as  if  it  had  been
       entered there.  "At" changes the context (the `current window' or `cur‐
       rent display' setting) of the command. If the first parameter describes
       a  non-unique  context, the command will be executed multiple times. If
       the first parameter is of the form  `_i_d_e_n_t_i_f_i_e_r*'  then  identifier  is
       matched against user names.  The command is executed once for each dis‐
       play of the selected user(s). If the first parameter  is  of  the  form
       `_i_d_e_n_t_i_f_i_e_r%'  identifier  is  matched  against  displays. Displays are
       named after the ttys they attach. The prefix `/dev/' or `/dev/tty'  may
       be  omitted  from  the  identifier.  If _i_d_e_n_t_i_f_i_e_r has a `#' or nothing
       appended it is matched against window numbers and titles.  Omitting  an
       identifier in front of the `#', `*' or `%'-character selects all users,
       displays or windows because a prefix-match is performed. Note  that  on
       the  affected  display(s)  a short message will describe what happened.
       Permission is checked for initiator of the "at" command,  not  for  the
       owners  of  the affected display(s).  Note that the '#' character works
       as a comment introducer when it is preceded by whitespace. This can  be
       escaped by prefixing a '\'.  Permission is checked for the initiator of
       the "at" command, not for the owners of the affected display(s).
       Caveat: When matching against windows, the command is executed at least
       once  per window. Commands that change the internal arrangement of win‐
       dows (like "other") may be called again. In shared windows the  command
       will be repeated for each attached display. Beware, when issuing toggle
       commands like "login"!  Some commands (e.g. "process") require  that  a
       display  is associated with the target windows.  These commands may not
       work correctly under "at" looping over windows.

       aattttrrccoolloorr _a_t_t_r_i_b [_a_t_t_r_i_b_u_t_e_/_c_o_l_o_r_-_m_o_d_i_f_i_e_r]

       This command can be used to highlight attributes by changing the  color
       of  the  text.  If  the  attribute  _a_t_t_r_i_b  is  in  use,  the specified
       attribute/color modifier is also applied. If no modifier is given,  the
       current one is deleted. See the "STRING ESCAPES" chapter for the syntax
       of the modifier. Screen understands two pseudo-attributes,  "i"  stands
       for  high-intensity  foreground  color and "I" for high-intensity back‐
       ground color.

       Examples:

              attrcolor b "R"

       Change the color to bright red if bold text is to be printed.

              attrcolor u "-u b"

       Use blue text instead of underline.

              attrcolor b ".I"

       Use bright colors for  bold  text.  Most  terminal  emulators  do  this
       already.

              attrcolor i "+b"

       Make bright colored text also bold.

       aauuttooddeettaacchh oonn|ooffff

       Sets  whether _s_c_r_e_e_n will automatically detach upon hangup, which saves
       all your running programs until they are resumed with a ssccrreeeenn --rr  com‐
       mand.   When  turned off, a hangup signal will terminate _s_c_r_e_e_n and all
       the processes it contains. Autodetach is on by default.

       aauuttoonnuukkee oonn|ooffff

       Sets whether a clear screen sequence should nuke all  the  output  that
       has not been written to the terminal. See also "obuflimit".

       bbaacckkttiicckk _i_d _l_i_f_e_s_p_a_n _a_u_t_o_r_e_f_r_e_s_h _c_m_d _a_r_g_s_…
       bbaacckkttiicckk _i_d

       Program  the  backtick command with the numerical id _i_d.  The output of
       such a command is used for substitution of the "%`" string escape.  The
       specified  _l_i_f_e_s_p_a_n  is  the number of seconds the output is considered
       valid. After this time, the command is run  again  if  a  corresponding
       string  escape  is  encountered.  The _a_u_t_o_r_e_f_r_e_s_h parameter triggers an
       automatic refresh for caption and hardstatus strings after  the  speci‐
       fied  number  of seconds. Only the last line of output is used for sub‐
       stitution.
       If both the _l_i_f_e_s_p_a_n and the _a_u_t_o_r_e_f_r_e_s_h parameters are zero, the back‐
       tick  program is expected to stay in the background and generate output
       once in a while.  In this case, the command is executed right away  and
       screen  stores  the  last  line  of  output. If a new line gets printed
       screen will automatically refresh the hardstatus or the captions.
       The second form of the command deletes the backtick  command  with  the
       numerical id _i_d.

       bbccee [oonn|ooffff]

       Change background-color-erase setting. If "bce" is set to on, all char‐
       acters cleared by an erase/insert/scroll/clear operation will  be  dis‐
       played  in  the  current  background color. Otherwise the default back‐
       ground color is used.

       bbeellll__mmssgg [_m_e_s_s_a_g_e]

       When a bell character is sent to a background window, _s_c_r_e_e_n displays a
       notification  in the message line.  The notification message can be re-
       defined by this command.  Each occurrence of `%' in _m_e_s_s_a_g_e is replaced
       by  the  number  of  the window to which a bell has been sent, and each
       occurrence of `^G' is replaced by the definition for bell in your term‐
       cap (usually an audible bell).  The default message is

                   'Bell in window %n'

       An  empty message can be supplied to the "bell_msg" command to suppress
       output of a message line (bell_msg "").  Without parameter, the current
       message is shown.

       bbiinndd [--cc _c_l_a_s_s] _k_e_y [_c_o_m_m_a_n_d [_a_r_g_s]]

       Bind  a command to a key.  By default, most of the commands provided by
       _s_c_r_e_e_n are bound to one or more keys as indicated in the  "DEFAULT  KEY
       BINDINGS"  section, e.g. the command to create a new window is bound to
       "C-c" and "c".  The "bind" command can be  used  to  redefine  the  key
       bindings and to define new bindings.  The _k_e_y argument is either a sin‐
       gle character, a two-character sequence of the form "^x"  (meaning  "C-
       x"), a backslash followed by an octal number (specifying the ASCII code
       of the character), or a backslash followed by a second character,  such
       as  "\^" or "\\".  The argument can also be quoted, if you like.  If no
       further argument is given, any previously established binding for  this
       key is removed.  The _c_o_m_m_a_n_d argument can be any command listed in this
       section.

       If a command class is specified via the "-c" option, the key  is  bound
       for the specified class. Use the "command" command to activate a class.
       Command classes can be used to create multiple command keys  or  multi-
       character bindings.

       Some examples:

                   bind ' ' windows
                   bind ^k
                   bind k
                   bind K kill
                   bind ^f screen telnet foobar
                   bind \033 screen -ln -t root -h 1000 9 su

       would bind the space key to the command that displays a list of windows
       (so that the command usually invoked by "C-a C-w" would also be  avail‐
       able  as  "C-a  space").  The  next three lines remove the default kill
       binding from "C-a C-k" and "C-a k".  "C-a K" is then bound to the  kill
       command.  Then  it  binds  "C-f" to the command "create a window with a
       TELNET connection to foobar", and bind "escape"  to  the  command  that
       creates an non-login window with a.k.a. "root" in slot #9, with a supe‐
       ruser shell and a scrollback buffer of 1000 lines.

                   bind -c demo1 0 select 10
                   bind -c demo1 1 select 11
                   bind -c demo1 2 select 12
                   bindkey "^B" command -c demo1

       makes "C-b 0" select window 10, "C-b 1" window 11, etc.

                   bind -c demo2 0 select 10
                   bind -c demo2 1 select 11
                   bind -c demo2 2 select 12
                   bind - command -c demo2

       makes "C-a - 0" select window 10, "C-a - 1" window 11, etc.

       bbiinnddkkeeyy [--dd] [--mm] [--aa] [[--kk|--tt] _s_t_r_i_n_g [_c_m_d _a_r_g_s]]

       This command manages screen's input translation tables. Every entry  in
       one  of  the  tables tells screen how to react if a certain sequence of
       characters is encountered. There are three tables: one that should con‐
       tain  actions  programmed by the user, one for the default actions used
       for terminal emulation and one for screen's  copy  mode  to  do  cursor
       movement.  See  section  "INPUT  TRANSLATION" for a list of default key
       bindings.
       If the --dd option is given,  bindkey  modifies  the  default  table,  --mm
       changes  the  copy mode table and with neither option the user table is
       selected.  The argument _s_t_r_i_n_g is the sequence of characters  to  which
       an action is bound. This can either be a fixed string or a termcap key‐
       board capability name (selectable with the --kk option).
       Some keys on a VT100 terminal can send a different string  if  applica‐
       tion  mode  is  turned  on  (e.g  the cursor keys).  Such keys have two
       entries in the translation table. You can select the  application  mode
       entry by specifying the --aa option.
       The --tt option tells screen not to do inter-character timing. One cannot
       turn off the timing if a termcap capability is used.
       _C_m_d can be any of screen's commands with an arbitrary number  of  _a_r_g_s.
       If _c_m_d is omitted the key-binding is removed from the table.
       Here are some examples of keyboard bindings:

               bindkey -d
       Show  all of the default key bindings. The application mode entries are
       marked with [A].

               bindkey -k k1 select 1
       Make the "F1" key switch to window one.

               bindkey -t foo stuff barfoo
       Make "foo" an abbreviation of the word "barfoo". Timeout is disabled so
       that users can type slowly.

               bindkey "\024" mapdefault
       This  key-binding  makes  "^T" an escape character for key-bindings. If
       you did the above "stuff barfoo" binding, you can enter the word  "foo"
       by  typing  "^Tfoo". If you want to insert a "^T" you have to press the
       key twice (i.e., escape the escape binding).

               bindkey -k F1 command
       Make the F11 (not F1!) key an alternative screen escape (besides ^A).

       bbrreeaakk [_d_u_r_a_t_i_o_n]

       Send a break signal for _d_u_r_a_t_i_o_n*0.25 seconds to this window.  For non-
       Posix  systems  the  time  interval  may be rounded up to full seconds.
       Most useful if a character device is attached to the window rather than
       a shell process (See also chapter "WINDOW TYPES"). The maximum duration
       of a break signal is limited to 15 seconds.

       bbllaannkkeerr

       Activate the screen blanker. First the screen is cleared. If no blanker
       program is defined, the cursor is turned off, otherwise, the program is
       started and it's output is written to the screen.  The  screen  blanker
       is killed with the first keypress, the read key is discarded.
       This command is normally used together with the "idle" command.

       bbllaannkkeerrpprrgg [_p_r_o_g_r_a_m _a_r_g_s]

       Defines  a  blanker  program.  Disables the blanker program if an empty
       argument is given. Shows the currently set blanker program if no  argu‐
       ments are given.

       bbrreeaakkttyyppee [_t_c_s_e_n_d_b_r_e_a_k|_T_I_O_C_S_B_R_K |_T_C_S_B_R_K]

       Choose  one  of  the available methods of generating a break signal for
       terminal devices. This command should affect the current  window  only.
       But  it still behaves identical to "defbreaktype". This will be changed
       in the future.  Calling "breaktype"  with  no  parameter  displays  the
       break method for the current window.

       bbuuffffeerrffiillee [_e_x_c_h_a_n_g_e_-_f_i_l_e]

       Change the filename used for reading and writing with the paste buffer.
       If the optional argument to the "bufferfile" command  is  omitted,  the
       default setting ("/tmp/screen-exchange") is reactivated.  The following
       example will paste the system's password file into  the  _s_c_r_e_e_n  window
       (using the paste buffer, where a copy remains):

                   C-a : bufferfile /etc/passwd
                   C-a < C-a ]
                   C-a : bufferfile

       bbuummpplleefftt

       Swaps window with previous one on window list.

       bbuummpprriigghhtt

       Swaps window with next one on window list.

       cc11 [oonn|ooffff]

       Change  c1  code  processing.  "C1  on" tells screen to treat the input
       characters between 128 and 159 as control  functions.   Such  an  8-bit
       code  is  normally  the same as ESC followed by the corresponding 7-bit
       code. The default setting is to process c1 codes  and  can  be  changed
       with the "defc1" command.  Users with fonts that have usable characters
       in the c1 positions may want to turn this off.

       ccaappttiioonn aallwwaayyss|sspplliittoonnllyy [_s_t_r_i_n_g]
       ccaappttiioonn ssttrriinngg [_s_t_r_i_n_g]

       This command controls the display of the window  captions.  Normally  a
       caption  is  only  used if more than one window is shown on the display
       (split screen mode). But if the type is set to aallwwaayyss  screen  shows  a
       caption even if only one window is displayed. The default is sspplliittoonnllyy.

       The  second form changes the text used for the caption. You can use all
       escapes from the "STRING ESCAPES" chapter. Screen  uses  a  default  of
       `%3n %t'.

       You can mix both forms by providing a string as an additional argument.

       cchhaarrsseett _s_e_t

       Change  the current character set slot designation and charset mapping.
       The first four character of _s_e_t  are  treated  as  charset  designators
       while the fifth and sixth character must be in range '0' to '3' and set
       the GL/GR charset mapping. On every position a '.' may be used to indi‐
       cate  that the corresponding charset/mapping should not be changed (_s_e_t
       is padded to six characters internally by appending  '.'   chars).  New
       windows  have  "BBBB02" as default charset, unless a "encoding" command
       is active.
       The current setting can be viewed with the "info" command.

       cchhddiirr [_d_i_r_e_c_t_o_r_y]

       Change the _c_u_r_r_e_n_t _d_i_r_e_c_t_o_r_y of _s_c_r_e_e_n to the specified  directory  or,
       if called without an argument, to your home directory (the value of the
       environment variable $HOME).  All windows that are created by means  of
       the  "screen"  command  from  within  ".screenrc" or by means of "C-a :
       screen …" or "C-a c" use this as their default  directory.   Without  a
       chdir  command,  this  would  be  the  directory  from which _s_c_r_e_e_n was
       invoked.  Hardcopy and log files are always  written  to  the  _w_i_n_d_o_w_'_s
       default  directory, _n_o_t the current directory of the process running in
       the window.  You can use this command multiple times in your  .screenrc
       to start various windows in different default directories, but the last
       chdir value will affect all the windows you create interactively.

       ccjjkkwwiiddtthh [[ oonn || ooffff ]]

       Treat ambiguous width characters as full/half width.

       cclleeaarr

       Clears the current window and saves its image to the scrollback buffer.

       ccoollllaappssee

       Reorders window on window list, removing number gaps between them.

       ccoolloonn [_p_r_e_f_i_x]

       Allows you to enter ".screenrc" command lines.  Useful  for  on-the-fly
       modification  of  key  bindings,  specific window creation and changing
       settings. Note that the "set" keyword no longer  exists!  Usually  com‐
       mands affect the current window rather than default settings for future
       windows. Change defaults with commands starting with 'def…'.

       If you consider this as the `Ex command mode' of _s_c_r_e_e_n, you may regard
       "C-a esc" (copy mode) as its `Vi command mode'.

       ccoommmmaanndd [--cc _c_l_a_s_s]

       This  command has the same effect as typing the screen escape character
       (^A). It is probably only useful for key bindings.  If the "-c"  option
       is  given,  select  the  specified  command class.  See also "bind" and
       "bindkey".

       ccoommppaacctthhiisstt [oonn|ooffff]

       This tells  screen  whether  to  suppress  trailing  blank  lines  when
       scrolling up text into the history buffer.

       ccoonnssoollee [oonn|ooffff]

       Grabs  or un-grabs the machines console output to a window.  _N_o_t_e: Only
       the owner of /dev/console can grab the console output.  This command is
       only available if the machine supports the ioctl TIOCCONS.

       ccooppyy

       Enter  copy/scrollback mode. This allows you to copy text from the cur‐
       rent window and its history into the paste buffer. In this mode  a  vi-
       like `full screen editor' is active:
       _M_o_v_e_m_e_n_t _k_e_y_s:
         hh, CC--hh, or lleefftt aarrrrooww move the cursor left.
         jj, CC--nn, or ddoowwnn aarrrrooww move the cursor down.
         kk, CC--pp, or uupp aarrrrooww move the cursor up.
         ll ('el') or rriigghhtt aarrrrooww move the cursor right.
         00 (zero) or CC--aa move to the leftmost column.
         ++ and -- positions one line up and down.
         HH,  MM and LL move the cursor to the leftmost column of the top, center
           or bottom line of the window.
         || moves to the specified absolute column.
         gg or hhoommee moves to the beginning of the buffer.
         GG or eenndd moves to the specified absolute line (default: end  of  buf‐
           fer).
         %% jumps to the specified percentage of the buffer.
         ^^  or  $$ move to the leftmost column, to the first or last non-white‐
           space character on the line.
         ww, bb, and ee move the cursor word by word.
         BB, EE move the cursor WORD by WORD (as in vi).
         ff//FF, tt//TT move the cursor forward/backward to the  next  occurence  of
           the  target.  (eg, '3fy' will move the cursor to the 3rd 'y' to the
           right.)
         ;; and ,, Repeat the last f/F/t/T command in the  same/opposite  direc‐
           tion.
         CC--ee  and  CC--yy scroll the display up/down by one line while preserving
           the cursor position.
         CC--uu and CC--dd scroll the display up/down by  the  specified  amount  of
           lines  while preserving the cursor position. (Default: half screen-
           full).
         CC--bb and CC--ff scroll the display up/down a full screen.

       _N_o_t_e:
           Emacs style movement keys can be customized by a .screenrc command.
           (E.g.  markkeys  "h=^B:l=^F:$=^E")  There is no simple method for a
           full emacs-style keymap, as this involves multi-character codes.

       _M_a_r_k_i_n_g:
           The copy range is specified by setting two marks. The text  between
           these marks will be highlighted. Press:
         ssppaaccee  or  eenntteerr  to  set  the  first or second mark respectively. If
           mmoouusseettrraacckk is set to `on', marks can also be set using  lleefftt  mmoouussee
           cclliicckk.
         YY and yy used to mark one whole line or to mark from start of line.
         WW marks exactly one word.
       _R_e_p_e_a_t _c_o_u_n_t:
           Any of these commands can be prefixed with a repeat count number by
           pressing digits
         00..99 which is taken as a repeat count.
           Example: "C-a C-[ H 10 j 5 Y" will copy lines 11  to  15  into  the
           paste buffer.
       _S_e_a_r_c_h_i_n_g:
         // _V_i-like search forward.
         ?? _V_i-like search backward.
         CC--aa ss _E_m_a_c_s style incremental search forward.
         CC--rr _E_m_a_c_s style reverse i-search.
         nn Find next search pattern.
         NN Find previous search pattern.
       _S_p_e_c_i_a_l_s:
           There  are  however  some keys that act differently than in _v_i.  _V_i
           does not allow one to yank rectangular blocks of text,  but  _s_c_r_e_e_n
           does. Press:
         cc  or  CC  to  set the left or right margin respectively. If no repeat
           count is given, both default to the current cursor position.
           Example: Try this on a rather full text screen: "C-a [ M 20 l SPACE
           c 10 l 5 j C SPACE".

           This  moves  one to the middle line of the screen, moves in 20 col‐
           umns left, marks the beginning of the paste buffer, sets  the  left
           column, moves 5 columns down, sets the right column, and then marks
           the end of the paste buffer. Now try:
           "C-a [ M 20 l SPACE 10 l 5 j SPACE"

           and notice the difference in the amount of text copied.
         JJ joins lines. It toggles between 4 modes: lines separated by a  new‐
           line  character  (012),  lines glued seamless, lines separated by a
           single whitespace and comma separated  lines.  Note  that  you  can
           prepend  the newline character with a carriage return character, by
           issuing a "crlf on".
         vv or VV is for all the _v_i users with ":set numbers" - it  toggles  the
           left margin between column 9 and 1. Press
         aa  before the final space key to toggle in append mode. Thus the con‐
           tents of the paste buffer will not be overwritten, but is  appended
           to.
         AA toggles in append mode and sets a (second) mark.
         >>  sets the (second) mark and writes the contents of the paste buffer
           to the screen-exchange file (/tmp/screen-exchange per default) once
           copy-mode is finished.
           This  example  demonstrates how to dump the whole scrollback buffer
           to that file: "C-A [ g SPACE G $ >".
         CC--gg gives information about the current line and column.
         xx or oo exchanges the first mark and the current cursor position.  You
           can use this to adjust an already placed mark.
         CC--ll ('el') will redraw the screen.
         @@ does nothing. Does not even exit copy mode.
         All keys not described here exit copy mode.

       ccooppyy__rreegg [_k_e_y]

       No longer exists, use "readreg" instead.

       ccrrllff [oonn|ooffff]

       This  affects  the copying of text regions with the `C-a [' command. If
       it is set to `on',  lines  will  be  separated  by  the  two  character
       sequence  `CR' - `LF'.  Otherwise (default) only `LF' is used.  When no
       parameter is given, the state is toggled.

       ddeebbuugg oonn|ooffff

       Turns runtime debugging on or off. If _s_c_r_e_e_n  has  been  compiled  with
       option  -DDEBUG  debugging available and is turned on per default. Note
       that this command only affects debugging output from the main  "SCREEN"
       process  correctly.  Debug  output  from attacher processes can only be
       turned off once and forever.

       ddeeffcc11 oonn|ooffff

       Same as the cc11 command except that the default setting for new  windows
       is changed. Initial setting is `on'.

       ddeeffaauuttoonnuukkee oonn|ooffff

       Same  as  the  aauuttoonnuukkee command except that the default setting for new
       displays is changed. Initial setting is `off'.  Note that you  can  use
       the  special  `AN' terminal capability if you want to have a dependency
       on the terminal type.

       ddeeffbbccee oonn|ooffff

       Same as the bbccee command except that the default setting for new windows
       is changed. Initial setting is `off'.

       ddeeffbbrreeaakkttyyppee [_t_c_s_e_n_d_b_r_e_a_k|_T_I_O_C_S_B_R_K |_T_C_S_B_R_K]

       Choose  one  of  the available methods of generating a break signal for
       terminal devices. The preferred methods are _t_c_s_e_n_d_b_r_e_a_k  and  _T_I_O_C_S_B_R_K.
       The  third, _T_C_S_B_R_K, blocks the complete _s_c_r_e_e_n session for the duration
       of the break, but it may be the  only  way  to  generate  long  breaks.
       _T_c_s_e_n_d_b_r_e_a_k and _T_I_O_C_S_B_R_K may or may not produce long breaks with spikes
       (e.g. 4 per second). This is not only system-dependent, this also  dif‐
       fers  between  serial  board  drivers.   Calling "defbreaktype" with no
       parameter displays the current setting.

       ddeeffcchhaarrsseett [_s_e_t]

       Like the cchhaarrsseett command except that the default setting for  new  win‐
       dows is changed. Shows current default if called without argument.

       ddeeffeessccaappee _x_y

       Set  the default command characters. This is equivalent to the "escape"
       except that it is useful multiuser sessions only. In a  multiuser  ses‐
       sion  "escape" changes the command character of the calling user, where
       "defescape" changes the default command characters for users that  will
       be added later.

       ddeeffffllooww oonn|ooffff|aauuttoo [iinntteerrrruupptt]

       Same  as  the ffllooww command except that the default setting for new win‐
       dows is changed. Initial setting is `auto'.  Specifying  "defflow  auto
       interrupt" is the same as the command-line options --ffaa and --ii.

       ddeeffggrr oonn|ooffff

       Same  as the ggrr command except that the default setting for new windows
       is changed. Initial setting is `off'.

       ddeeffhhssttaattuuss [_s_t_a_t_u_s]

       The hardstatus line that all new windows will get  is  set  to  _s_t_a_t_u_s.
       This  command  is useful to make the hardstatus of every window display
       the window number or title or the like.  _S_t_a_t_u_s may  contain  the  same
       directives  as in the window messages, but the directive escape charac‐
       ter is '^E' (octal 005) instead of '%'.  This was done to make a misin‐
       terpretation  of program generated hardstatus lines impossible.  If the
       parameter _s_t_a_t_u_s is omitted, the current default string  is  displayed.
       Per default the hardstatus line of new windows is empty.

       ddeeffeennccooddiinngg _e_n_c

       Same  as  the  eennccooddiinngg command except that the default setting for new
       windows is changed. Initial setting is the encoding taken from the ter‐
       minal.

       ddeefflloogg oonn|ooffff

       Same as the lloogg command except that the default setting for new windows
       is changed. Initial setting is `off'.

       ddeeffllooggiinn oonn|ooffff

       Same as the llooggiinn command except that the default setting for new  win‐
       dows is changed. This is initialized with `on' as distributed (see con‐
       fig.h.in).

       ddeeffmmooddee _m_o_d_e

       The mode of each newly allocated pseudo-tty is set to _m_o_d_e.  _M_o_d_e is an
       octal number.  When no "defmode" command is given, mode 0622 is used.

       ddeeffmmoonniittoorr oonn|ooffff

       Same  as  the  mmoonniittoorr  command except that the default setting for new
       windows is changed. Initial setting is `off'.

       ddeeffmmoouusseettrraacckk oonn|ooffff

       Same as the mmoouusseettrraacckk command except that the default setting for  new
       windows is changed. Initial setting is `off'.

       ddeeffnnoonnbblloocckk oonn|ooffff|_n_u_m_s_e_c_s

       Same  as  the nnoonnbblloocckk command except that the default setting for dis‐
       plays is changed. Initial setting is `off'.

       ddeeffoobbuufflliimmiitt _l_i_m_i_t

       Same as the oobbuufflliimmiitt command except that the default setting  for  new
       displays  is  changed. Initial setting is 256 bytes.  Note that you can
       use the special 'OL' terminal capability if you want to have  a  depen‐
       dency on the terminal type.

       ddeeffssccrroollllbbaacckk _n_u_m

       Same  as the ssccrroollllbbaacckk command except that the default setting for new
       windows is changed. Initial setting is 100.

       ddeeffsshheellll _c_o_m_m_a_n_d

       Synonym to the sshheellll .screenrc command. See there.

       ddeeffssiilleennccee oonn|ooffff

       Same as the ssiilleennccee command except that the  default  setting  for  new
       windows is changed. Initial setting is `off'.

       ddeeffsslloowwppaassttee _m_s_e_c_"

       Same  as  the sslloowwppaassttee command except that the default setting for new
       windows is changed. Initial setting is 0 milliseconds, meaning `off'.

       ddeeffuuttff88 oonn|ooffff

       Same as the uuttff88 command except that the default setting for  new  win‐
       dows  is  changed.  Initial  setting is `on' if screen was started with
       "-U", otherwise `off'.

       ddeeffwwrraapp oonn|ooffff

       Same as the wwrraapp command except that the default setting for  new  win‐
       dows  is changed. Initially line-wrap is on and can be toggled with the
       "wrap" command ("C-a r") or by means of "C-a : wrap on|off".

       ddeeffwwrriitteelloocckk oonn|ooffff|aauuttoo

       Same as the wwrriitteelloocckk command except that the default setting  for  new
       windows is changed. Initially writelocks will off.

       ddeeffzzoommbbiiee [_k_e_y_s]

       Synonym  to the zzoommbbiiee command. Both currently change the default.  See
       there.

       ddeettaacchh [--hh]

       Detach the _s_c_r_e_e_n session (disconnect it from the terminal and  put  it
       into  the background).  This returns you to the shell where you invoked
       _s_c_r_e_e_n.  A detached _s_c_r_e_e_n can be resumed by invoking _s_c_r_e_e_n  with  the
       --rr  option  (see  also  section  "COMMAND-LINE OPTIONS"). The --hh option
       tells screen to  immediately  close  the  connection  to  the  terminal
       ("hangup").

       ddiinnffoo

       Show what screen thinks about your terminal. Useful if you want to know
       why features like color or the alternate charset don't work.

       ddiissppllaayyss

       Shows a tabular listing of  all  currently  connected  user  front-ends
       (displays).  This is most useful for multiuser sessions.  The following
       keys can be used in displays list:
         kk, CC--pp, or uupp Move up one line.
         jj, CC--nn, or ddoowwnn Move down one line.
         CC--aa or hhoommee Move to the first line.
         CC--ee or eenndd Move to the last line.
         CC--uu or CC--dd Move one half page up or down.
         CC--bb or CC--ff Move one full page up or down.
         mmoouusseecclliicckk Move to the selected line. Available when "mousetrack"  is
           set to on.
         ssppaaccee Refresh the list
         dd Detach that display
         DD Power detach that display
         CC--gg, eenntteerr, or eessccaappee Exit the list

       The following is an example of what "displays" could look like:

              xterm 80x42 jnweiger@/dev/ttyp4     0(m11)   &rWx
              facit 80x24 mlschroe@/dev/ttyhf nb 11(tcsh)   rwx
              xterm 80x42 jnhollma@/dev/ttyp5     0(m11)   &R.x
               (A)   (B)     (C)     (D)     (E) (F)(G)   (H)(I)

       The legend is as follows:
       (A) The terminal type known by screen for this display.
       (B) Displays geometry as width x height.
       (C) Username who is logged in at the display.
       (D) Device name of the display or the attached device
       (E) Display is in blocking or nonblocking mode. The available modes are
       "nb", "NB", "Z<", "Z>", and "BL".
       (F) Number of the window
       (G) Name/title of window
       (H) Whether the window is shared
       (I) Window permissions. Made up of three characters:
             (1st character)
                ‘-’ : no read
                ‘r’ : read
                ‘R’ : read only due to foreign wlock
             (2nd character)
                ‘-’ : no write
                ‘.’ : write suppressed by foreign wlock
                ‘w’ : write
                ‘W’ : own wlock
             (3rd character)
                ‘-’ : no execute
                ‘x’ : execute

       "Displays" needs a region size of at least 10  characters  wide  and  5
       characters high in order to display.

       ddiiggrraapphh [_p_r_e_s_e_t[unicode-value]]]

       This  command  prompts  the  user  for a digraph sequence. The next two
       characters typed are looked up in a builtin  table  and  the  resulting
       character  is  inserted  in  the input stream. For example, if the user
       enters 'a"', an a-umlaut will  be  inserted.  If  the  first  character
       entered  is  a 0 (zero), _s_c_r_e_e_n will treat the following characters (up
       to three) as an octal number instead.  The optional argument _p_r_e_s_e_t  is
       treated  as user input, thus one can create an "umlaut" key.  For exam‐
       ple the command "bindkey ^K digraph '"'" enables the user  to  generate
       an a-umlaut by typing CTRL-K a.  When a non-zero _u_n_i_c_o_d_e_-_v_a_l_u_e is spec‐
       ified, a new digraph is created with the specified preset. The  digraph
       is unset if a zero value is provided for the _u_n_i_c_o_d_e_-_v_a_l_u_e_.

       dduummpptteerrmmccaapp

       Write the termcap entry for the virtual terminal optimized for the cur‐
       rently  active  window  to  the   file   ".termcap"   in   the   user's
       "$HOME/.screen"  directory  (or wherever _s_c_r_e_e_n stores its sockets. See
       the "FILES" section below).  This termcap entry  is  identical  to  the
       value of the environment variable $TERMCAP that is set up by _s_c_r_e_e_n for
       each window. For terminfo based systems you will need  to  run  a  con‐
       verter like _c_a_p_t_o_i_n_f_o and then compile the entry with _t_i_c.

       eecchhoo [--nn] _m_e_s_s_a_g_e

       The  echo  command may be used to annoy _s_c_r_e_e_n users with a 'message of
       the day'. Typically installed in a global  /etc/screenrc.   The  option
       "-n" may be used to suppress the line feed.  See also "sleep".  Echo is
       also useful for online checking of environment variables.

       eennccooddiinngg _e_n_c [_e_n_c]

       Tell _s_c_r_e_e_n how to interpret the input/output. The first argument  sets
       the encoding of the current window. Each window can emulate a different
       encoding. The optional second parameter overwrites the encoding of  the
       connected terminal. It should never be needed as screen uses the locale
       setting to detect the encoding.  There is also a way to select a termi‐
       nal  encoding  depending on the terminal type by using the "KJ" termcap
       entry.

       Supported encodings are eucJP, SJIS, eucKR, eucCN, Big5,  GBK,  KOI8-R,
       CP1251,  UTF-8,  ISO8859-2, ISO8859-3, ISO8859-4, ISO8859-5, ISO8859-6,
       ISO8859-7, ISO8859-8, ISO8859-9, ISO8859-10, ISO8859-15, jis.

       See also "defencoding", which changes the default setting of a new win‐
       dow.

       eessccaappee _x_y

       Set  the  command character to _x and the character generating a literal
       command character (by triggering the "meta" command) to _y  (similar  to
       the  -e  option).   Each  argument is either a single character, a two-
       character sequence of the form "^x" (meaning "C-x"), a  backslash  fol‐
       lowed  by an octal number (specifying the ASCII code of the character),
       or a backslash followed by a second character, such as  "\^"  or  "\\".
       The default is "^Aa".

       eevvaall _c_o_m_m_a_n_d_1 [_c_o_m_m_a_n_d_2 _…]

       Parses and executes each argument as separate command.

       eexxeecc [[_f_d_p_a_t] _n_e_w_c_o_m_m_a_n_d [_a_r_g_s _…]]

       Run  a  unix subprocess (specified by an executable path _n_e_w_c_o_m_m_a_n_d and
       its optional arguments) in the current window. The flow of data between
       newcommands  stdin/stdout/stderr, the process originally started in the
       window (let us call it "application-process") and screen  itself  (win‐
       dow)  is controlled by the file descriptor pattern fdpat.  This pattern
       is basically a three character sequence representing stdin, stdout  and
       stderr of newcommand. A dot (.) connects the file descriptor to _s_c_r_e_e_n.
       An exclamation mark (!) causes the file descriptor to be  connected  to
       the application-process. A colon (:) combines both.  User input will go
       to newcommand unless newcommand receives the application-process'  out‐
       put  (fdpats  first  character  is  `!' or `:') or a pipe symbol (|) is
       added (as a fourth character) to the end of fdpat.
       Invoking `exec' without arguments shows name and arguments of the  cur‐
       rently  running  subprocess  in this window. Only one subprocess a time
       can be running in each window.
       When a subprocess is running the `kill' command will affect it  instead
       of the windows process.
       Refer  to  the postscript file `doc/fdpat.ps' for a confusing illustra‐
       tion of all 21 possible combinations. Each  drawing  shows  the  digits
       2,1,0  representing  the  three file descriptors of newcommand. The box
       marked `W' is the usual pty that has  the  application-process  on  its
       slave  side.   The  box  marked  `P'  is the secondary pty that now has
       _s_c_r_e_e_n at its master side.

       Abbreviations:
       Whitespace between the word `exec' and fdpat and  the  command  can  be
       omitted. Trailing dots and a fdpat consisting only of dots can be omit‐
       ted. A simple `|' is synonymous for the pattern `!..|'; the  word  exec
       can be omitted here and can always be replaced by `!'.

       Examples:

              exec … /bin/sh
              exec /bin/sh
              !/bin/sh

       Creates  another  shell in the same window, while the original shell is
       still running. Output of both shells is displayed  and  user  input  is
       sent to the new /bin/sh.

              exec !.. stty 19200
              exec ! stty 19200
              !!stty 19200

       Set  the  speed  of  the window's tty. If your stty command operates on
       stdout, then add another `!'.

              exec !..| less
              |less

       This adds a pager to the window output. The special  character  `|'  is
       needed  to  give  the  user control over the pager although it gets its
       input from the window's process. This works, because  _l_e_s_s  listens  on
       stderr  (a  behavior that _s_c_r_e_e_n would not expect without the `|') when
       its stdin is not a tty.  _L_e_s_s versions newer than  177  fail  miserably
       here; good old _p_g still works.

              !:sed -n s/.*Error.*/\007/p

       Sends  window  output  to  both,  the user and the sed command. The sed
       inserts an additional bell character (oct. 007) to  the  window  output
       seen  by _s_c_r_e_e_n.  This will cause "Bell in window x" messages, whenever
       the string "Error" appears in the window.

       ffiitt

       Change the window size to the size of the current region. This  command
       is needed because screen doesn't adapt the window size automatically if
       the window is displayed more than once.

       ffllooww [oonn|ooffff|aauuttoo]

       Sets the flow-control mode for  this  window.   Without  parameters  it
       cycles  the  current  window's flow-control setting from "automatic" to
       "on" to "off".  See the discussion on "FLOW-CONTROL" later on  in  this
       document  for  full details and note, that this is subject to change in
       future releases.  Default is set by `defflow'.

       ffooccuuss [uupp|ddoowwnn|ttoopp|bboottttoomm]

       Move the input focus to the next region. This is done in a  cyclic  way
       so  that the top region is selected after the bottom one. If no subcom‐
       mand is given it defaults to `down'. `up' cycles in the opposite order,
       `top' and `bottom' go to the top and bottom region respectively. Useful
       bindings are (j and k as in vi)
           bind j focus down
           bind k focus up
           bind t focus top
           bind b focus bottom
       Note that kk is traditionally bound to the _k_i_l_l command.

       ffooccuussmmiinnssiizzee [[ (( _w_i_d_t_h||mmaaxx||__ )) (( _h_e_i_g_h_t||mmaaxx||__ )) ]]

       This forces any currently selected region to be  automatically  resized
       at least a certain _w_i_d_t_h and _h_e_i_g_h_t. All other surrounding regions will
       be resized in order to accommodate.  This constraint follows  everytime
       the  "focus"  command  is  used.  The  "resize"  command can be used to
       increase either dimension of a region, but never below what is set with
       "focusminsize".  The  underscore  `_'  is  a synonym for mmaaxx. Setting a
       _w_i_d_t_h and _h_e_i_g_h_t of `0 0' (zero zero) will  undo  any  constraints  and
       allow  for  manual resizing.  Without any parameters, the minimum width
       and height is shown.

       ggrr [oonn|ooffff]

       Turn GR charset switching on/off. Whenever screen sees an input charac‐
       ter with the 8th bit set, it will use the charset stored in the GR slot
       and print the character with the 8th bit  stripped.  The  default  (see
       also  "defgr")  is  not  to  process GR switching because otherwise the
       ISO88591 charset would not work.

       ggrroouupp [_g_r_o_u_p_t_i_t_l_e]

       Change or show the group the current window belongs to. Windows can  be
       moved  around  between  different  groups by specifying the name of the
       destination group. Without specifying a group, the title of the current
       group is displayed.

       hhaarrddccooppyy [--hh] [_f_i_l_e]

       Writes  out  the  currently displayed image to the file _f_i_l_e, or, if no
       filename is specified, to _h_a_r_d_c_o_p_y_._n in the default directory, where  _n
       is the number of the current window.  This either appends or overwrites
       the file if it exists. See below.  If the option --hh is specified,  dump
       also the contents of the scrollback buffer.

       hhaarrddccooppyy__aappppeenndd oonn|ooffff

       If set to "on", _s_c_r_e_e_n will append to the "hardcopy.n" files created by
       the command "C-a h", otherwise these files are overwritten  each  time.
       Default is `off'.

       hhaarrddccooppyyddiirr _d_i_r_e_c_t_o_r_y

       Defines  a  directory  where  hardcopy  files will be placed. If unset,
       hardcopys are dumped in _s_c_r_e_e_n's current working directory.

       hhaarrddssttaattuuss [oonn|ooffff]
       hhaarrddssttaattuuss [aallwwaayyss]ffiirrssttlliinnee|llaassttlliinnee|mmeessssaaggee|iiggnnoorree [_s_t_r_i_n_g]
       hhaarrddssttaattuuss ssttrriinngg [_s_t_r_i_n_g]

       This command configures the use and emulation of the  terminal's  hard‐
       status  line.  The first form toggles whether _s_c_r_e_e_n will use the hard‐
       ware status line to display messages. If the  flag  is  set  to  `off',
       these  messages are overlaid in reverse video mode at the display line.
       The default setting is `on'.

       The second form tells _s_c_r_e_e_n what to do if the terminal doesn't have  a
       hardstatus  line  (i.e.  the  termcap/terminfo capabilities "hs", "ts",
       "fs" and "ds" are not set).  When "firstline/lastline" is used,  _s_c_r_e_e_n
       will  reserve  the  first/last  line of the display for the hardstatus.
       "message" uses _s_c_r_e_e_n_'_s message mechanism  and  "ignore"  tells  _s_c_r_e_e_n
       never  to  display the hardstatus.  If you prepend the word "always" to
       the type (e.g., "alwayslastline"), _s_c_r_e_e_n will use the type even if the
       terminal supports a hardstatus.

       The  third form specifies the contents of the hardstatus line.  '%h' is
       used as default string, i.e., the stored hardstatus of the current win‐
       dow  (settable  via  "ESC]0;<string>^G"  or "ESC_<string>ESC\") is dis‐
       played.  You can customize this to any string you  like  including  the
       escapes  from  the "STRING ESCAPES" chapter. If you leave out the argu‐
       ment _s_t_r_i_n_g, the current string is displayed.

       You can mix the second and third form by providing the string as  addi‐
       tional argument.

       hheeiigghhtt [--ww|--dd] [_l_i_n_e_s [_c_o_l_s]]

       Set the display height to a specified number of lines. When no argument
       is given it toggles between 24 and 42 lines display. You can also spec‐
       ify  a  width  if  you want to change both values.  The --ww option tells
       screen to leave the display size unchanged  and  just  set  the  window
       size, --dd vice versa.

       hheellpp [--cc _c_l_a_s_s]

       Not  really  a  online help, but displays a help _s_c_r_e_e_n showing you all
       the key bindings.  The first pages list all the internal commands  fol‐
       lowed  by  their  current  bindings.  Subsequent pages will display the
       custom commands, one command per key.  Press  space  when  you're  done
       reading  each  page, or return to exit early.  All other characters are
       ignored. If the "-c" option is given, display all  bound  commands  for
       the specified command class.  See also "DEFAULT KEY BINDINGS" section.

       hhiissttoorryy

       Usually  users  work  with  a shell that allows easy access to previous
       commands.  For example csh has the command "!!" to repeat the last com‐
       mand executed.  _S_c_r_e_e_n allows you to have a primitive way of re-calling
       "the command that started …": You just type the first  letter  of  that
       command, then hit `C-a {' and _s_c_r_e_e_n tries to find a previous line that
       matches with the `prompt character' to the left  of  the  cursor.  This
       line  is  pasted into this window's input queue.  Thus you have a crude
       command history (made up by the visible window and its scrollback  buf‐
       fer).

       hhssttaattuuss _s_t_a_t_u_s

       Change the window's hardstatus line to the string _s_t_a_t_u_s.

       iiddllee [_t_i_m_e_o_u_t [_c_m_d _a_r_g_s]]

       Sets  a command that is run after the specified number of seconds inac‐
       tivity is reached. This command will normally be the "blanker"  command
       to  create  a  screen blanker, but it can be any screen command.  If no
       command is specified, only the timeout is set. A timeout  of  zero  (or
       the  special  timeout  ooffff)  disables  the  timer.  If no arguments are
       given, the current settings are displayed.

       iiggnnoorreeccaassee [oonn|ooffff]

       Tell screen to ignore the case of characters in  searches.  Default  is
       `off'. Without any options, the state of ignorecase is toggled.

       iinnffoo

       Uses  the  message  line  to display some information about the current
       window: the cursor position in the form  "(column,row)"  starting  with
       "(1,1)",  the terminal width and height plus the size of the scrollback
       buffer in lines, like in "(80,24)+50",  the  current  state  of  window
       XON/XOFF  flow  control  is shown like this (See also section FLOW CON‐
       TROL):

         +flow     automatic flow control, currently on.
         -flow     automatic flow control, currently off.
         +(+)flow  flow control enabled. Agrees with automatic control.
         -(+)flow  flow control disabled. Disagrees with automatic control.
         +(-)flow  flow control enabled. Disagrees with automatic control.
         -(-)flow  flow control disabled. Agrees with automatic control.

       The current line wrap setting (`+wrap' indicates enabled, `-wrap'  not)
       is  also  shown. The flags `ins', `org', `app', `log', `mon' or `nored'
       are displayed when the window is in insert mode, origin mode,  applica‐
       tion-keypad  mode,  has  output logging, activity monitoring or partial
       redraw enabled.

       The currently active character set (_G_0, _G_1, _G_2, or _G_3)  and  in  square
       brackets  the  terminal character sets that are currently designated as
       _G_0 through _G_3 is shown. If the window is  in  UTF-8  mode,  the  string
       "UTF-8" is shown instead.

       Additional  modes  depending on the type of the window are displayed at
       the end of the status line (See also chapter "WINDOW TYPES").
       If the state machine of the  terminal  emulator  is  in  a  non-default
       state,  the  info line is started with a string identifying the current
       state.
       For system information use the "time" command.

       iinnss__rreegg [_k_e_y]

       No longer exists, use "paste" instead.

       kkiillll

       Kill current window.
       If there is an `exec' command running then it is killed. Otherwise  the
       process  (shell) running in the window receives a HANGUP condition, the
       window structure is removed  and  _s_c_r_e_e_n  (your  display)  switches  to
       another  window.   When  the  last  window  is destroyed, _s_c_r_e_e_n exits.
       After a kill _s_c_r_e_e_n switches to the previously displayed window.
       Note: _E_m_a_c_s users should keep this command  in  mind,  when  killing  a
       line.   It  is recommended not to use "C-a" as the _s_c_r_e_e_n escape key or
       to rebind kill to "C-a K".

       llaassttmmssgg

       Redisplay the last contents of  the  message/status  line.   Useful  if
       you're  typing  when  a message appears, because  the message goes away
       when you press a key (unless your terminal has a hardware status line).
       Refer to the commands "msgwait" and "msgminwait" for fine tuning.

       llaayyoouutt nneeww [_t_i_t_l_e]

       Create  a new layout. The screen will change to one whole region and be
       switched to the blank window. From here, you build the regions and  the
       windows  they  show as you desire. The new layout will be numbered with
       the smallest available integer, starting with zero. You can  optionally
       give  a  title  to  your new layout.  Otherwise, it will have a default
       title of "layout". You can always change the title later by  using  the
       command llaayyoouutt ttiittllee.

       llaayyoouutt rreemmoovvee [_n_|_t_i_t_l_e]

       Remove, or in other words, delete the specified layout. Either the num‐
       ber or the title can be specified. Without either specification, _s_c_r_e_e_n
       will remove the current layout.

       Removing a layout does not affect your set windows or regions.

       llaayyoouutt nneexxtt

       Switch to the next layout available

       llaayyoouutt pprreevv

       Switch to the previous layout available

       llaayyoouutt sseelleecctt [_n_|_t_i_t_l_e]

       Select the desired layout. Either the number or the title can be speci‐
       fied. Without either specification, _s_c_r_e_e_n will prompt  and  ask  which
       screen  is  desired. To see which layouts are available, use the llaayyoouutt
       sshhooww command.

       llaayyoouutt sshhooww

       List on the message line the number(s) and title(s)  of  the  available
       layout(s). The current layout is flagged.

       llaayyoouutt ttiittllee [_t_i_t_l_e]

       Change  or display the title of the current layout. A string given will
       be used to name the layout. Without any options, the current title  and
       number is displayed on the message line.

       llaayyoouutt nnuummbbeerr [_n]

       Change  or  display  the number of the current layout. An integer given
       will be used to number the layout. Without  any  options,  the  current
       number and title is displayed on the message line.

       llaayyoouutt aattttaacchh [_t_i_t_l_e|::llaasstt]

       Change  or  display  which  layout  to reattach back to. The default is
       ::llaasstt, which tells _s_c_r_e_e_n to reattach back to the last used layout just
       before  detachment.  By  supplying  a title, You can instruct _s_c_r_e_e_n to
       reattach to a particular layout regardless which one was  used  at  the
       time of detachment. Without any options, the layout to reattach to will
       be shown in the message line.

       llaayyoouutt ssaavvee [_n_|_t_i_t_l_e]

       Remember the current arrangement of regions.  When  used,  _s_c_r_e_e_n  will
       remember  the arrangement of vertically and horizontally split regions.
       This arrangement is restored when a _s_c_r_e_e_n  session  is  reattached  or
       switched  back  from  a  different  layout.  If the session ends or the
       _s_c_r_e_e_n process dies, the layout arrangements are lost. The llaayyoouutt  dduummpp
       command  should  help  in  this siutation. If a number or title is sup‐
       plied, _s_c_r_e_e_n will remember the arrangement of that particular  layout.
       Without any options, _s_c_r_e_e_n will remember the current layout.

       Saving  your  regions  can  be  done  automatically by using the llaayyoouutt
       aauuttoossaavvee command.

       llaayyoouutt aauuttoossaavvee [oonn||ooffff]

       Change or display  the  status  of  automatcally  saving  layouts.  The
       default  is oonn, meaning when _s_c_r_e_e_n is detached or changed to a differ‐
       ent layout, the arrangement of regions and windows will  be  remembered
       at  the time of change and restored upon return.  If autosave is set to
       ooffff, that arrangement will only be restored to either to the last  man‐
       ual  save,  using llaayyoouutt ssaavvee, or to when the layout was first created,
       to a single region with a single window. Without either an oonn  or  ooffff,
       the current status is displayed on the message line.

       llaayyoouutt dduummpp [_f_i_l_e_n_a_m_e]

       Write to a file the order of splits made in the current layout. This is
       useful to recreate the order of your regions used in your current  lay‐
       out.  Only  the  current  layout  is  recorded.  While the order of the
       regions are recorded, the sizes of those regions and which windows cor‐
       respond  to  which  regions  are  not. If no filename is specified, the
       default is _l_a_y_o_u_t_-_d_u_m_p, saved in the directory that the _s_c_r_e_e_n  process
       was  started in. If the file already exists, llaayyoouutt dduummpp will append to
       that file. As an example:

                   C-a : layout dump /home/user/.screenrc

       will save or append the layout to the user's _._s_c_r_e_e_n_r_c file.

       lliicceennssee

       Display the disclaimer page. This is done whenever  _s_c_r_e_e_n  is  started
       without   options,   which   should  be  often  enough.  See  also  the
       "startup_message" command.

       lloocckkssccrreeeenn

       Lock this  display.   Call  a  screenlock  program  (/local/bin/lck  or
       /usr/bin/lock  or  a builtin if no other is available). Screen does not
       accept any command keys until this program terminates.  Meanwhile  pro‐
       cesses  in  the  windows  may  continue,  as  the  windows  are  in the
       `detached' state. The screenlock program may  be  changed  through  the
       environment  variable  $LOCKPRG  (which  must  be set in the shell from
       which _s_c_r_e_e_n is started) and is executed with the user's uid and gid.
       Warning: When you leave other shells unlocked and you have no  password
       set  on  _s_c_r_e_e_n,  the  lock is void: One could easily re-attach from an
       unlocked shell. This feature should rather be called `lockterminal'.

       lloogg [oonn|ooffff]

       Start/stop writing output of the current window to a file "screenlog._n"
       in the window's default directory, where _n is the number of the current
       window. This filename can be changed with the `logfile' command. If  no
       parameter is given, the state of logging is toggled. The session log is
       appended to the previous contents of the file if it already exists. The
       current  contents  and  the  contents of the scrollback history are not
       included in the session log.  Default is `off'.

       llooggffiillee _f_i_l_e_n_a_m_e
       llooggffiillee fflluusshh _s_e_c_s

       Defines the name the log files will get. The default is "screenlog.%n".
       The  second  form changes the number of seconds _s_c_r_e_e_n will wait before
       flushing the logfile buffer to the file-system. The default value is 10
       seconds.

       llooggiinn [oonn|ooffff]

       Adds  or  removes  the  entry in the utmp database file for the current
       window.  This controls if the window is `logged in'.  When no parameter
       is  given,  the  login state of the window is toggled.  Additionally to
       that toggle, it is convenient having a `log in' and a  `log  out'  key.
       E.g. `bind I login on' and `bind O login off' will map these keys to be
       C-a I and C-a O.  The default setting (in config.h.in) should  be  "on"
       for  a _s_c_r_e_e_n that runs under suid-root.  Use the "deflogin" command to
       change the default login state for new windows. Both commands are  only
       present when _s_c_r_e_e_n has been compiled with utmp support.

       llooggttssttaammpp [oonn|ooffff]
       llooggttssttaammpp aafftteerr [_s_e_c_s]
       llooggttssttaammpp ssttrriinngg [_s_t_r_i_n_g]

       This command controls logfile time-stamp mechanism of _s_c_r_e_e_n_.  If time-
       stamps are turned "on", _s_c_r_e_e_n adds a  string  containing  the  current
       time  to the logfile after two minutes of inactivity.  When output con‐
       tinues and more than another two minutes have passed,  a  second  time-
       stamp  is  added  to document the restart of the output. You can change
       this timeout with the second form of the command.  The  third  form  is
       used  for customizing the time-stamp string (`-- %n:%t -- time-stamp --
       %M/%d/%y %c:%s --\n' by default).

       mmaappddeeffaauulltt

       Tell _s_c_r_e_e_n that the next input character should only be looked  up  in
       the default bindkey table. See also "bindkey".

       mmaappnnoottnneexxtt

       Like mapdefault, but don't even look in the default bindkey table.

       mmaappttiimmeeoouutt [_t_i_m_e_o_u_t]

       Set the inter-character timer for input sequence detection to a timeout
       of _t_i_m_e_o_u_t ms. The default timeout is 300ms. Maptimeout with  no  argu‐
       ments shows the current setting.  See also "bindkey".

       mmaarrkkkkeeyyss _s_t_r_i_n_g

       This  is  a  method  of changing the keymap used for copy/history mode.
       The string is made up of _o_l_d_c_h_a_r=_n_e_w_c_h_a_r pairs which are  separated  by
       `:'. Example: The string "B=^B:F=^F" will change the keys `C-b' and `C-
       f' to the vi style binding (scroll up/down fill page).  This happens to
       be  the  default  binding  for  `B'  and  `F'.   The  command "markkeys
       h=^B:l=^F:$=^E" would set the mode for an emacs-style binding.  If your
       terminal sends characters, that cause you to abort copy mode, then this
       command may help by binding these characters to do nothing.  The  no-op
       character  is `@' and is used like this: "markkeys @=L=H" if you do not
       want to use the `H' or `L' commands any longer.  As shown in this exam‐
       ple,  multiple  keys can be assigned to one function in a single state‐
       ment.

       mmaaxxwwiinn _n_u_m

       Set the maximum  window  number  screen  will  create.  Doesn't  affect
       already  existing  windows. The number can be increased only when there
       are no existing windows.

       mmeettaa

       Insert the command  character  (C-a)  in  the  current  window's  input
       stream.

       mmoonniittoorr [oonn|ooffff]

       Toggles  activity  monitoring of windows.  When monitoring is turned on
       and an affected window  is  switched  into  the  background,  you  will
       receive  the  activity  notification  message in the status line at the
       first sign of output and the window will also be marked with an `@'  in
       the  window-status  display.   Monitoring is initially off for all win‐
       dows.

       mmoouusseettrraacckk [oonn|ooffff]

       This command determines whether _s_c_r_e_e_n will  watch  for  mouse  clicks.
       When  this  command is enabled, regions that have been split in various
       ways can be selected by pointing to them with a mouse and left-clicking
       them. Without specifying oonn or ooffff, the current state is displayed. The
       default state is determined by the "defmousetrack" command.

       mmssggmmiinnwwaaiitt _s_e_c

       Defines the time _s_c_r_e_e_n delays a new message when one message  is  cur‐
       rently displayed.  The default is 1 second.

       mmssggwwaaiitt _s_e_c

       Defines  the  time a message is displayed if _s_c_r_e_e_n is not disturbed by
       other activity. The default is 5 seconds.

       mmuullttiiuusseerr oonn|ooffff

       Switch between singleuser and multiuser mode. Standard _s_c_r_e_e_n operation
       is  singleuser.  In  multiuser  mode  the  commands `acladd', `aclchg',
       `aclgrp' and `acldel' can be used to enable (and disable)  other  users
       accessing this _s_c_r_e_e_n session.

       nneetthhaacckk oonn|ooffff

       Changes the kind of error messages used by _s_c_r_e_e_n.  When you are famil‐
       iar with the game "nethack", you may enjoy the  nethack-style  messages
       which will often blur the facts a little, but are much funnier to read.
       Anyway, standard messages often tend to be unclear as well.
       This option is only available if _s_c_r_e_e_n was compiled with  the  NETHACK
       flag defined. The default setting is then determined by the presence of
       the environment variable $NETHACKOPTIONS and the file ~/.nethackrc - if
       either one is present, the default is oonn.

       nneexxtt

       Switch  to  the  next  window.   This command can be used repeatedly to
       cycle through the list of windows.

       nnoonnbblloocckk [oonn|ooffff|_n_u_m_s_e_c_s]

       Tell screen how to deal with user interfaces (displays) that  cease  to
       accept output. This can happen if a user presses ^S or a TCP/modem con‐
       nection gets cut but no hangup is received. If nonblock is ooffff (this is
       the default) screen waits until the display restarts to accept the out‐
       put. If nonblock is oonn, screen waits until the timeout is  reached  (oonn
       is  treated  as  1s).  If the display still doesn't receive characters,
       screen will consider it "blocked" and stop sending characters to it. If
       at  some time it restarts to accept characters, screen will unblock the
       display and redisplay the updated window contents.

       nnuummbbeerr [[+|-]_n]

       Change the current window's number. If the given number  _n  is  already
       used  by  another  window,  both  windows exchange their numbers. If no
       argument is specified, the current window number (and title) is  shown.
       Using `+' or `-' will change the window's number by the relative amount
       specified.

       oobbuufflliimmiitt [_l_i_m_i_t]

       If the output buffer contains more bytes than the specified  limit,  no
       more  data  will be read from the windows. The default value is 256. If
       you have a fast display (like xterm), you can set  it  to  some  higher
       value. If no argument is specified, the current setting is displayed.

       oonnllyy

       Kill all regions but the current one.

       ootthheerr

       Switch  to  the  window  displayed  previously.  If this window does no
       longer exist, _o_t_h_e_r has the same effect as _n_e_x_t.

       ppaarrttiiaall oonn|ooffff

       Defines whether the display should be  refreshed  (as  with  _r_e_d_i_s_p_l_a_y)
       after  switching  to  the current window. This command only affects the
       current window.  To immediately affect all windows use  the  _a_l_l_p_a_r_t_i_a_l
       command.  Default is `off', of course.  This default is fixed, as there
       is currently no _d_e_f_p_a_r_t_i_a_l command.

       ppaasssswwoorrdd [_c_r_y_p_t_e_d___p_w]

       Present a crypted password in your ".screenrc" file and _s_c_r_e_e_n will ask
       for  it, whenever someone attempts to resume a detached. This is useful
       if you have privileged programs running under _s_c_r_e_e_n and  you  want  to
       protect  your session from reattach attempts by another user masquerad‐
       ing as your uid (i.e. any superuser.)  If no crypted password is speci‐
       fied, _s_c_r_e_e_n prompts twice for typing a password and places its encryp‐
       tion in the paste buffer.  Default is `none',  this  disables  password
       checking.

       ppaassttee [_r_e_g_i_s_t_e_r_s [_d_e_s_t___r_e_g]]

       Write  the  (concatenated)  contents  of the specified registers to the
       stdin queue of the current window. The register '.' is treated  as  the
       paste  buffer. If no parameter is given the user is prompted for a sin‐
       gle register to paste.  The paste buffer can be filled with  the  _c_o_p_y,
       _h_i_s_t_o_r_y  and  _r_e_a_d_b_u_f commands.  Other registers can be filled with the
       _r_e_g_i_s_t_e_r, _r_e_a_d_r_e_g and _p_a_s_t_e commands.  If _p_a_s_t_e is called with a second
       argument,  the  contents  of the specified registers is pasted into the
       named destination register rather than the window. If '.'  is  used  as
       the  second  argument,  the  displays  paste buffer is the destination.
       Note, that "paste" uses a wide variety of resources: Whenever a  second
       argument  is  specified  no  current  window is needed. When the source
       specification only contains registers (not the paste buffer) then there
       need not be a current display (terminal attached), as the registers are
       a global resource. The paste buffer exists once for every user.

       ppaasstteeffoonntt [oonn|ooffff]

       Tell _s_c_r_e_e_n to include  font  information  in  the  paste  buffer.  The
       default  is  not  to do so. This command is especially useful for multi
       character fonts like kanji.

       ppooww__bbrreeaakk

       Reopen the window's terminal line  and  send  a  break  condition.  See
       `break'.

       ppooww__ddeettaacchh

       Power  detach.  Mainly the same as _d_e_t_a_c_h, but also sends a HANGUP sig‐
       nal to the parent process of _s_c_r_e_e_n.  CAUTION: This will  result  in  a
       logout, when _s_c_r_e_e_n was started from your login-shell.

       ppooww__ddeettaacchh__mmssgg [_m_e_s_s_a_g_e]

       The _m_e_s_s_a_g_e specified here is output whenever a `Power detach' was per‐
       formed. It may be used as a replacement for  a  logout  message  or  to
       reset baud rate, etc.  Without parameter, the current message is shown.

       pprreevv

       Switch  to  the window with the next lower number.  This command can be
       used repeatedly to cycle through the list of windows.

       pprriinnttccmmdd [_c_m_d]

       If _c_m_d is not an empty string, _s_c_r_e_e_n will not use the  terminal  capa‐
       bilities  "po/pf"  if  it detects an ansi print sequence EESSCC [[ 55 ii, but
       pipe the output into _c_m_d.  This should normally be a command like "lpr"
       or  "'cat  >  /tmp/scrprint'".  pprriinnttccmmdd without a command displays the
       current setting.  The ansi sequence EESSCC \\ ends printing and closes  the
       pipe.
       Warning:  Be careful with this command! If other user have write access
       to your terminal, they will be able to fire off print commands.

       pprroocceessss [_k_e_y]

       Stuff the contents of the specified register into _s_c_r_e_e_n's input queue.
       If  no argument is given you are prompted for a register name. The text
       is parsed as if it had been typed in from  the  user's  keyboard.  This
       command can be used to bind multiple actions to a single key.

       qquuiitt

       Kill all windows and terminate _s_c_r_e_e_n.  Note that on VT100-style termi‐
       nals the keys C-4 and C-\ are identical.  This makes the default  bind‐
       ings  dangerous:  Be  careful not to type C-a C-4 when selecting window
       no. 4.  Use the empty bind command (as in "bind '^\'") to remove a  key
       binding.

       rreeaaddbbuuff [--ee _e_n_c_o_d_i_n_g] [_f_i_l_e_n_a_m_e]

       Reads  the  contents  of the specified file into the paste buffer.  You
       can tell screen the encoding of the file via the --ee option.  If no file
       is  specified, the screen-exchange filename is used.  See also "buffer‐
       file" command.

       rreeaaddrreegg [--ee _e_n_c_o_d_i_n_g] [_r_e_g_i_s_t_e_r [_f_i_l_e_n_a_m_e]]

       Does one of two things, dependent on number of arguments: with zero  or
       one  arguments it it duplicates the paste buffer contents into the reg‐
       ister specified or entered at the prompt. With two arguments  it  reads
       the contents of the named file into the register, just as _r_e_a_d_b_u_f reads
       the screen-exchange file into the paste buffer.  You  can  tell  screen
       the encoding of the file via the --ee option.  The following example will
       paste the system's password file into the _s_c_r_e_e_n window (using register
       p, where a copy remains):

                   C-a : readreg p /etc/passwd
                   C-a : paste p

       rreeddiissppllaayy

       Redisplay  the  current  window. Needed to get a full redisplay when in
       partial redraw mode.

       rreeggiisstteerr [--ee _e_n_c_o_d_i_n_g] _k_e_y _s_t_r_i_n_g

       Save the specified _s_t_r_i_n_g to the register _k_e_y.   The  encoding  of  the
       string  can  be specified via the --ee option.  See also the "paste" com‐
       mand.

       rreemmoovvee

       Kill the current region. This is a no-op if there is only one region.

       rreemmoovveebbuuff

       Unlinks the screen-exchange file used by the  commands  "writebuf"  and
       "readbuf".

       rreennddiittiioonn bbeellll || mmoonniittoorr || ssiilleennccee || ssoo _a_t_t_r [[_c_o_l_o_r]]

       Change  the  way _s_c_r_e_e_n renders the titles of windows that have monitor
       or bell flags set in caption  or  hardstatus  or  windowlist.  See  the
       "STRING  ESCAPES" chapter for the syntax of the modifiers.  The default
       for monitor is currently "=b " (bold, active colors), for bell  "=ub  "
       (underline, bold and active colors), and "=u " for silence.

       rreesseett

       Reset  the  virtual  terminal  to  its  "power-on"  values. Useful when
       strange settings (like scroll regions or graphics  character  set)  are
       left over from an application.

       rreessiizzee

       Resize  the  current region. The space will be removed from or added to
       the region below or if there's not enough space from the region above.

              resize +N   increase current region height by N

              resize -N   decrease current region height by N

              resize  N   set current region height to N

              resize  =   make all windows equally high

              resize  max maximize current region height

              resize  min minimize current region height

       ssccrreeeenn [_-_o_p_t_s] [_n] [_c_m_d [_a_r_g_s]|////ggrroouupp]

       Establish a new window.  The flow-control options (--ff,  --ffnn  and  --ffaa),
       title  (a.k.a.) option (--tt), login options (--ll and --llnn) , terminal type
       option (--TT <term>), the all-capability-flag (--aa) and scrollback  option
       (--hh  <num>)  may be specified with each command.  The option (--MM) turns
       monitoring on for this window.  The option (--LL) turns output logging on
       for  this  window.  If an optional number _n in the range 0..MAXWIN-1 is
       given, the window number _n is assigned to the newly created window (or,
       if  this  number  is  already in-use, the next available number).  If a
       command is specified after "screen", this command (with the given argu‐
       ments)  is  started  in  the window; otherwise, a shell is created.  If
       ////ggrroouupp is supplied, a container-type window is created in which  other
       windows may be created inside it.

       Thus, if your ".screenrc" contains the lines

                   # example for .screenrc:
                   screen 1
                   screen -fn -t foobar -L 2 telnet foobar

       _s_c_r_e_e_n creates a shell window (in window #1) and a window with a TELNET
       connection to the machine foobar (with no flow-control using the  title
       "foobar"  in window #2) and will write a logfile ("screenlog.2") of the
       telnet session.  Note, that unlike previous versions of _s_c_r_e_e_n no addi‐
       tional default window is created when "screen" commands are included in
       your ".screenrc" file. When the  initialization  is  completed,  _s_c_r_e_e_n
       switches  to  the  last  window specified in your .screenrc file or, if
       none, opens a default window #0.
       Screen has built in some functionality of "cu" and "telnet".  See  also
       chapter "WINDOW TYPES".

       ssccrroollllbbaacckk _n_u_m

       Set  the  size  of the scrollback buffer for the current windows to _n_u_m
       lines. The default scrollback is 100 lines.  See also  the  "defscroll‐
       back" command and use "info" to view the current setting. To access and
       use the contents in the scrollback buffer, use the "copy" command.

       sseelleecctt [_W_i_n_d_o_w_I_D]

       Switch to the window identified by _W_i_n_d_o_w_I_D.  This can be a prefix of a
       window title (alphanumeric window name) or a window number.  The param‐
       eter is optional and if omitted, you get prompted  for  an  identifier.
       When  a  new  window  is  established,  the  first  available number is
       assigned to this window.  Thus, the first window can  be  activated  by
       "select  0".   The  number of windows is limited at compile-time by the
       MAXWIN configuration parameter (which defaults to 40).  There  are  two
       special  WindowIDs,  "-"  selects  the  internal  blank  window and "."
       selects the current window. The latter is useful if used with  screen's
       "-X" option.

       sseessssiioonnnnaammee [_n_a_m_e]

       Rename  the  current  session.  Note,  that for "screen -list" the name
       shows up with the process-id prepended. If the argument "name" is omit‐
       ted,  the name of this session is displayed. Caution: The $STY environ‐
       ment variables will still reflect the old name in pre-existing  shells.
       This may result in confusion. Use of this command is generally discour‐
       aged. Use the "-S" command-line option if you want to name a  new  ses‐
       sion.  The default is constructed from the tty and host names.

       sseetteennvv [_v_a_r [_s_t_r_i_n_g]]

       Set the environment variable _v_a_r to value _s_t_r_i_n_g.  If only _v_a_r is spec‐
       ified, the user will be prompted to enter a value.   If  no  parameters
       are  specified,  the user will be prompted for both variable and value.
       The environment is inherited by all subsequently forked shells.

       sseettssiidd [oonn|ooffff]

       Normally screen uses different sessions and process groups for the win‐
       dows. If setsid is turned _o_f_f, this is not done anymore and all windows
       will be in the same process group as the screen backend  process.  This
       also  breaks job-control, so be careful.  The default is _o_n, of course.
       This command is probably useful only in rare circumstances.

       sshheellll _c_o_m_m_a_n_d

       Set the command to be used to create a new shell.  This  overrides  the
       value of the environment variable $SHELL.  This is useful if you'd like
       to run a tty-enhancer which is expecting to execute the program  speci‐
       fied  in $SHELL.  If the command begins with a '-' character, the shell
       will be started as a login-shell. Typical shells do only  minimal  ini‐
       tialization when not started as a login-shell.  E.g. Bash will not read
       your "~/.bashrc" unless it is a login-shell.

       sshheellllttiittllee _t_i_t_l_e

       Set the title for all shells created during startup or by the  C-A  C-c
       command.   For  details about what a title is, see the discussion enti‐
       tled "TITLES (naming windows)".

       ssiilleennccee [oonn|ooffff|_s_e_c]

       Toggles silence monitoring of windows.  When silence is turned  on  and
       an  affected  window  is switched into the background, you will receive
       the silence notification message in the status line after  a  specified
       period of inactivity (silence). The default timeout can be changed with
       the `silencewait' command or by specifying a number of seconds  instead
       of `on' or `off'.  Silence is initially off for all windows.

       ssiilleenncceewwaaiitt _s_e_c

       Define  the  time  that  all  windows monitored for silence should wait
       before displaying a message. Default 30 seconds.

       sslleeeepp _n_u_m

       This command will pause the execution of a .screenrc file for _n_u_m  sec‐
       onds.   Keyboard  activity  will end the sleep.  It may be used to give
       users a chance to read the messages output by "echo".

       sslloowwppaassttee _m_s_e_c

       Define the speed at which text is inserted into the current  window  by
       the paste ("C-a ]") command.  If the slowpaste value is nonzero text is
       written character by character.  _s_c_r_e_e_n will make a pause of _m_s_e_c  mil‐
       liseconds after each single character write to allow the application to
       process its input. Only use slowpaste if your underlying system exposes
       flow control problems while pasting large amounts of text.

       ssoorrtt

       Sort the windows in alphabetical order of the window tiles.

       ssoouurrccee _f_i_l_e

       Read and execute commands from file _f_i_l_e. Source commands may be nested
       to a maximum recursion level of ten. If file is not  an  absolute  path
       and screen is already processing a source command, the parent directory
       of the running source command file is used to search for the  new  com‐
       mand file before screen's current directory.

       Note  that  termcap/terminfo/termcapinfo  commands only work at startup
       and reattach time, so they must be reached  via  the  default  screenrc
       files to have an effect.

       ssoorreennddiittiioonn [_a_t_t_r [_c_o_l_o_r]]

       This command is deprecated. See "rendition so" instead.

       sspplliitt [--vv]

       Split  the current region into two new ones. All regions on the display
       are resized to make room for the new region. The blank window  is  dis‐
       played  on  the  new  region. Splits are made horizontally unless -v is
       used. Use the "remove" or the "only" command  to  delete  regions.  Use
       "focus" to toggle between regions.

       ssttaarrttuupp__mmeessssaaggee oonn|ooffff

       Select  whether  you  want  to see the copyright notice during startup.
       Default is `on', as you probably noticed.

       ssttuuffff [_s_t_r_i_n_g]

       Stuff the string _s_t_r_i_n_g in the input  buffer  of  the  current  window.
       This  is like the "paste" command but with much less overhead.  Without
       a parameter, screen will prompt for a  string  to  stuff.   You  cannot
       paste large buffers with the "stuff" command. It is most useful for key
       bindings. See also "bindkey".

       ssuu [_u_s_e_r_n_a_m_e [_p_a_s_s_w_o_r_d [_p_a_s_s_w_o_r_d_2]]]

       Substitute the user of a display. The command prompts for  all  parame‐
       ters  that  are omitted. If passwords are specified as parameters, they
       have to be specified un-crypted. The first password is matched  against
       the systems passwd database, the second password is matched against the
       _s_c_r_e_e_n password as set with the commands "acladd" or "password".   "Su"
       may  be  useful  for the _s_c_r_e_e_n administrator to test multiuser setups.
       When the identification fails, the user  has  access  to  the  commands
       available  for  user nnoobbooddyy.  These are "detach", "license", "version",
       "help" and "displays".

       ssuussppeenndd

       Suspend _s_c_r_e_e_n.  The windows are in the `detached' state, while  _s_c_r_e_e_n
       is  suspended.  This  feature  relies on the shell being able to do job
       control.

       tteerrmm _t_e_r_m

       In each window's environment _s_c_r_e_e_n opens, the $TERM variable is set to
       "screen" by default.  But when no description for "screen" is installed
       in the local termcap or terminfo data base, you set $TERM to  -  say  -
       "vt100".  This  won't do much harm, as _s_c_r_e_e_n is VT100/ANSI compatible.
       The use of the "term" command is discouraged for  non-default  purpose.
       That  is,  one  may want to specify special $TERM settings (e.g. vt100)
       for the next "screen rlogin  othermachine"  command.  Use  the  command
       "screen -T vt100 rlogin othermachine" rather than setting and resetting
       the default.

       tteerrmmccaapp _t_e_r_m _t_e_r_m_i_n_a_l_-_t_w_e_a_k_s [_w_i_n_d_o_w_-_t_w_e_a_k_s]
       tteerrmmiinnffoo _t_e_r_m _t_e_r_m_i_n_a_l_-_t_w_e_a_k_s [_w_i_n_d_o_w_-_t_w_e_a_k_s]
       tteerrmmccaappiinnffoo _t_e_r_m _t_e_r_m_i_n_a_l_-_t_w_e_a_k_s [_w_i_n_d_o_w_-_t_w_e_a_k_s]

       Use this command to modify your terminal's termcap entry without  going
       through  all  the  hassles involved in creating a custom termcap entry.
       Plus, you can optionally customize the termcap generated for  the  win‐
       dows.   You have to place these commands in one of the screenrc startup
       files, as they are meaningless once the terminal emulator is booted.
       If your system works uses the terminfo database  rather  than  termcap,
       _s_c_r_e_e_n  will  understand  the  `terminfo'  command,  which has the same
       effects as the `termcap' command.  Two separate commands are  provided,
       as there are subtle syntactic differences, e.g. when parameter interpo‐
       lation (using `%') is required. Note that termcap names of the capabil‐
       ities have to be used with the `terminfo' command.
       In many cases, where the arguments are valid in both terminfo and term‐
       cap syntax, you can 